;;; Hissp & Lissp tutorial
;;; https://hissp.readthedocs.io/en/latest/tutorial.html

;;; prelude objects from itertools and make basic macros accessible
(hissp.basic.._macro_.prelude)

(progn
  (print "Raw string")
  (print (len "\n\n")))  ; 4

(progn
  (print "Hash string")
  (print (len #"\n\n")))  ; 2

(progn
  (print "Import")
  (print itertools.)
  (print itertools..chain)
  (print package.subpackage.module.)
  (print package.subpackage.module..func))

(progn
  (print "Munging")
  (print 'a->b)

  ;; Hissp package includes the following functions
  ;; - hissp.munger.munge
  ;; - hissp.munger.demunge
  )

(progn
  (print "Lambda")
  (lambda (a                ; positional only arguments
           :/               ; [end of positional only arguments]
           b                ; normal arguments
           :                ; [begin of pairs of argument and values]
           e 1  f 2         ; arguments with default values
           :* args          ; rest positional arguments
           h 4  i :?  j 1   ; keyword-only arguments
           :** kwargs       ; rest keyword arguments
           )
    42)

  (lambda (:                ; arguments are paired
           :* :?            ; rest positional arguments are not allowed
           h 4  i :?  j 1   ; keyword-only arguments
           )
    42)

  (lambda (:*               ; rest positional arguments are not allowed
           :                ; arguments are paired
           h 4  i :?  j 1   ; keyword-only arguments
           )
    42)

  (lambda (: :* :? a 10) 10)
  )

(progn
  ;; https://hissp.readthedocs.io/en/latest/tutorial.html#inject
  ;;
  ;; ".#" evalutes the next form and injects into the expression
  (Print "inject")
  ;; inject the result of a lissp expression
  (print '.#(.title "hello, world!"))
  ;; inject the result of a python code
  (print .#"'hello, world!'.title()"))

(progn
  (print "Discard")
  (print 1 _#"this text is ignored" 3) _#(it's ignored too))

(progn
  (print "Templates")
  (print `(1 2 ,(operator..add 1 2)))
  (print `(:a ,@"bcd" :e))
  (print `(:a ,@'(b c d) :e)))


(progn
  (print "Gensym")
  (print `($#hiss $#hiss)))

(progn
  (print "Compiling Packages")

  ;; convert "package/subpackage/module_in_lissp.lissp" into
  ;; "package/subpackage/module_in_lissp.py".
  (hissp.reader..transpile __package__ "package/subpackage/module_in_lissp"))
