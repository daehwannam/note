* Bash tip
** pipe (|)
https://en.wikipedia.org/wiki/Pipeline_(Unix)
https://www.techtarget.com/whatis/definition/pipe
https://unix.stackexchange.com/a/597087

- pipe is a buffer that connects two commands where the buffer is
  - the standard output of the 1st command and
  - the input of the 2nd command
- a pipe buffer is passed as the last argument of the 2nd command

- example 1
  #+begin_src sh
  # make a file
  printf "b\na\nc\ne\nd\n" > temp-file

  # sort file directly
  sort temp-file

  # sort the result of cat command
  cat temp-file | sort
  #+end_src

- example 2
  #+begin_src sh
  # grep with a file
  ps -ef > temp-file
  grep systemd temp-file

  # grep with the result from the 1st command
  ps -ef | grep systemd
  #+end_src
** make empty file
#+begin_src sh
touch file.txt
#+end_src

*** make an empty file without changing modification time
https://unix.stackexchange.com/a/404855
use "-a" option
#+begin_src sh
touch -a file.txt
#+end_src

** Queuing processes
https://superuser.com/a/462673
#+begin_src sh
command1 &
wait; command2-1 && command2-2 &
wait; command3 &
...
#+end_src

** run if previous command succeed
https://unix.stackexchange.com/a/22727
#+begin_src sh
previous_command
if [ $? -eq 0 ]; then
    next_command
fi
#+end_src

** check if a file exists
https://stackoverflow.com/a/638980
#+begin_src sh
if [ ! -f /tmp/foo.txt ]; then
    echo "File not found!"
fi
#+end_src

** array
https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays

** array slice
#+begin_src bash :results output drawer
X=(11 22 33 44 55 66 77 88 99)
echo ${X[@]:2}
echo ${X[@]:2:4}
#+end_src

#+RESULTS:
:results:
33 44 55 66 77 88 99
33 44 55 66
:end:

*** slice for command line arguments
https://unix.stackexchange.com/questions/225943/except-the-1st-argument
#+begin_src bash
echo ${@:2}   # 2nd to last
echo ${@:2:3} # 2nd to 4th ; 3 items are printed
#+end_src

** string slice
#+begin_src bash :results output drawer
Y='ABCDEFGHIJK'
echo ${Y:2}
#+end_src

#+RESULTS:
:results:
CDEFGHIJK
:end:

** command line arguments
https://tecadmin.net/tutorial/bash-scripting/bash-command-arguments/

** arguments to array
https://stackoverflow.com/a/12711853
#+begin_src sh
myArray=("$@")
#+end_src

** adding custom commands
https://unix.stackexchange.com/a/84694
- make a directory that contains command scripts or executables
  #+begin_src sh
  mkdir ~/command
  #+end_src
- update ~/.bashrc
  #+begin_src sh
  export PATH="$HOME/command:$PATH"
  #+end_src

  In this case, commands in "$HOME/command" have higher priorities.
  If you want them to have lower priorities:

  #+begin_src sh
  export PATH="$PATH:$HOME/command"
  #+end_src

** keep running a process although its terminals is closed
https://unix.stackexchange.com/a/4006

#+begin_src sh
emacs &
disown
#+end_src
or
#+begin_src sh
emacs & disown
#+end_src

if you want terminal as soon as the program starts,
#+begin_src sh
emacs & disown && exit
#+end_src

** editing with emacs
This option is useful when a program (e.g. git) rerquires external editor to modify text
*** EDITOR vs. VISUAL
https://unix.stackexchange.com/a/4861
*** EDITOR variable
https://unix.stackexchange.com/a/502691
#+begin_src sh
EDITOR=emacs virsh edit win10
EDITOR=emacsclient virsh edit win10
EDITOR="emacs -nw" virsh edit win10
#+end_src

You can also export the default editor in ~/.bashrc
#+begin_src sh
export EDITOR=emacs
export EDITOR=emacsclient
export EDITOR="emacs -nw"
#+end_src
*** VISUAL variable
https://stackoverflow.com/a/116570

- GUI version
  #+begin_src sh
  emacs --daemon  # M-x server-start
  emacsclient
  VISUAL=emacsclient virsh edit win10
  export VISUAL=emacsclient
  #+end_src

- Terminal version
  #+begin_src sh
  emacs --daemon  # M-x server-start
  emacsclient -t
  VISUAL=emacsclient virsh edit win10  # don't add [-t] option
  export VISUAL=emacsclient
  #+end_src

** wait until all background jobs are finished
https://stackoverflow.com/a/1131511

use "wait $(jobs -rp)"

- jobs options
  https://www.cyberciti.biz/faq/unix-linux-jobs-command-examples-usage-syntax/
  -r : display only running jobs
  -p : display only PIDs

e.g. waiting until 3 jobs are finished
#+begin_src bash
sleep 7 && echo "done 1st" &
sleep 2 && echo "done 2nd" &
sleep 3 && echo "done 3rd" &

wait $(jobs -rp)
echo "after wait"
#+end_src

** check if command is installed
https://stackoverflow.com/a/677212

#+begin_src sh
command -v <the_command>
#+end_src

e.g. install autoconf unless it exists
#+begin_src sh
if ! command -v autoconf &> /dev/null
then
    # install autoconf first, if it's not installed
    conda install -c conda-forge autoconf
fi
#+end_src

** .bashrc vs. profile
https://serverfault.com/a/500071
- .profile should also be loaded when starting a graphical desktop session.
- .profile is executed in login shell
  https://unix.stackexchange.com/a/29811
  #+begin_src sh
  su -l <id>
  #+end_src
  "su <id>" doesn't execute .profile

** check if command is failed or not
#+begin_src bash
# https://unix.stackexchange.com/a/22728
if some-command ; then
    echo "Command succeeded"
else
    echo "Command failed"
fi
#+end_src

e.g.
#+begin_src bash
# https://unix.stackexchange.com/a/22728
if cd some-directory ; then
    echo "Success to change the current directory"
else
    echo "Fail to change the current directory"
fi
#+end_src

** stop running bash script when an error occurs
https://stackoverflow.com/a/2871034
- Method 1: modify a script file
  #+begin_src bash
  #!/bin/bash
  set -e
  # any subsequent(*) commands which fail will cause the shell script to exit immediately
  #+end_src
- Method 2: command line argument option
  #+begin_src bash
  bash -e some_script.sh
  #+end_src

** get the path of a bash script running from a command line
#+begin_src sh
THIS_FILE_PATH=`realpath $0`
THIS_DIR_PATH=`dirname $THIS_FILE_PATH`
#+end_src

** get a relative path
https://stackoverflow.com/a/28523143

#+begin_src sh
realpath --relative-to="$file1" "$file2"
#+end_src

e.g.
#+begin_src sh
realpath --relative-to=/usr/bin/nmap /tmp/testing
#+end_src

#+RESULTS:
: ../../../tmp/testing

** exit bash script
https://stackoverflow.com/a/1378284

#+begin_src sh
exit 1
#+end_src

** conditioning
*** check a value is empty or not
https://serverfault.com/a/382740
*** check if a directory is empty or not
https://superuser.com/a/1361548

- check a directory is empty
  #+begin_src sh
  DIR_PATH=some/path/to/dir
  if test -n "$(find $DIR_PATH -maxdepth 0 -empty)" ; then
      echo "The directory '$DIR_PATH' is empty"
      exit 1
  fi
  #+end_src
- check a directory is not empty
  #+begin_src sh
  DIR_PATH=some/path/to/dir
  if test ! -n "$(find $DIR_PATH -maxdepth 0 -empty)" ; then
      echo "The directory '$DIR_PATH' is NOT empty"
      exit 1
  fi
  #+end_src
**** check if a directory exists and it's not empty
#+begin_src sh
DIR_PATH=some/path/to/dir
if [[ -d $DIR_PATH  &&  ! -n "$(find $DIR_PATH -maxdepth 0 -empty)" ]]; then
    echo "The directory '$DIR_PATH' already exists and it's not empty."
    exit 1
fi
#+end_src
** finding a file in ancestors
https://unix.stackexchange.com/a/22215
#+begin_src bash
find-up () {
    path=$(pwd)
    while [[ "$path" != "" && ! -e "$path/$1" ]]; do
        path=${path%/*}
    done
    echo "$path"
}

BASHRC_DIR_PATH=$(find-up .bashrc)
echo $BASHRC_DIR_PATH
#+end_src
*** activate conda locally
#+begin_src bash
CONDA_ENV_NAME_FILE_NAME='.conda-env'
CONDA_ENV_NAME_DIR_PATH=$(find-up $CONDA_ENV_NAME_FILE_NAME)
if [ ! -z $CONDA_ENV_NAME_DIR_PATH ]; then
    CONDA_ENV_NAME=$(cat $CONDA_ENV_NAME_DIR_PATH/$CONDA_ENV_NAME_FILE_NAME)
    conda activate $CONDA_ENV_NAME
else
    conda activate default
fi
#+end_src

where we assume that ".conda-env" exists in teh ancestors,
and ".conda-env" contains a conda environment name, such as "base".
** counter the number of items separated by commas
https://stackoverflow.com/a/10817516
#+begin_src sh
ITEMS='foo, bar, baz'
NUM_ITEMS=$(($(echo $ITEMS | tr -cd , | wc -c) + 1))
echo $NUM_ITEMS
#+end_src

#+RESULTS:
: 3

- ~tr -cd ,~ : remove characters except commas (,)
  - ~-c~ means set complement
  - ~-d~ means deletion
- ~wc -c~ : count characters
  - ~-c~ option means characters
- ~$((num-of-commas + 1))~ : adding the number of commas and 1
*** counter the number of items separated by commas
#+begin_src sh
ITEMS='foo, bar, baz'
echo $ITEMS | tr -cd , | wc -c
#+end_src
** making comma separated numbers
https://superuser.com/a/1213183
#+begin_src bash :results output drawer
seq -s , 7 12
#+end_src

#+RESULTS:
:results:
7,8,9,10,11,12
:end:

The ~-s~ option means a separator.

** random number in a range
https://stackoverflow.com/a/2556282

#+begin_src sh
# It's an inclusive range, which so contains 49152 and 65535.
# 49152-65535 is the range of dynamic ports.
PORT=$(shuf -i 49152-65535 -n 1)
#+end_src

* Configuration of ~/.bashrc
#+begin_src bash
# added by Anaconda3 4.4.0 installer
# export PATH="/home/dhnam/bin/anaconda3/bin:$PATH"
# source activate default  # after installing "conda create -n default python=3 anaconda"
# alias emacs='emacs25'  # alias emacs='emacs24'

# CUDA path config
export PATH=/usr/local/cuda-10.1/bin:$PATH
export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/dhnam/program/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/dhnam/program/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

export PATH="/home/dhnam/program/anaconda3/envs/default/bin:$PATH"
source activate default  # after installing "conda create -n default python=3 anaconda"
#+end_src

#+RESULTS:
