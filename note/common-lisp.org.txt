
* Install
  https://askubuntu.com/questions/670304/what-is-the-install-routine-for-common-lisp-slime-sbcl-quicklisp-on-ubuntu
  https://lispcookbook.github.io/cl-cookbook/getting-started.html
** install sbcl
   $ sudo apt-get install sbcl
   $ sudo apt install sbcl-source  # necessary for "slime-edit-definition" (M-.)
   or
   $ conda install -c conda-forge sbcl
** install quicklisp
   https://www.quicklisp.org/
   copy and past the code in the gray box of the website (https://www.quicklisp.org/)

   Below is the summary (written at 2020.11.19):
   $ curl -O https://beta.quicklisp.org/quicklisp.lisp
   $ curl -O https://beta.quicklisp.org/quicklisp.lisp.asc
   $ gpg --verify quicklisp.lisp.asc quicklisp.lisp
   $ sbcl --load quicklisp.lisp
   * (quicklisp-quickstart:install)
   * (ql:system-apropos "vecto")
   * (ql:quickload "vecto")
   * (ql:add-to-init-file)
   * (quit)

** install slime by using quicklisp
   $ sbcl
   * (ql:quickload "quicklisp-slime-helper")
   * (quit)
** after installing slime, it will say following:
   - To use, add this to your ~/.emacs:
     (load (expand-file-name "~/quicklisp/slime-helper.el"))
     ;; Replace "sbcl" with the path to your implementation
     (setq inferior-lisp-program "path/to/sbcl")
   - you can get the path by "which sbcl"
** M-x slime
** run a script file in command line
   $ sbcl --script source.lisp

* Debian
** library install
   https://wiki.debian.org/CommonLisp
   there are two ways to install libraries in debian
   - via apt
     - once a system has been installed, it can be loaded with "require"
       - "asdf" should be loaded beforehand by (require "asdf")?
   - via quicklisp
     - "ql:quickload" tries downloading then loads a system
     - once a system has been installed, it can be loaded with "require"
       - "quicklisp" should be loaded beforehand
       - quicklisp can be loaded by (load "~/quicklisp/setup.lisp")
         unless "~/.sbclrc" is not updated by (ql:add-to-init-file)

* SLIME
** emacs SLIME commands
   - slime : runs REPL
   - slime-repl-quit
   - slime-quit-lisp
   - slime-edit-definition (M-.) : go to definition from slime REPL
     source code should be loaded to find definitions (e.g. slime-load-system, slime-load-file)
     https://slime-devel.common-lisp.narkive.com/aqHOQt9W/problem-with-slime-edit-definition
*** resource
    - The Common Lisp Cookbook
      https://lispcookbook.github.io/cl-cookbook/emacs-ide.html
      - slime REPL shortcuts
        https://lispcookbook.github.io/cl-cookbook/emacs-ide.html#all-slime-repl-shortcuts
      - slime mode shortcuts
        https://lispcookbook.github.io/cl-cookbook/emacs-ide.html#all-other-slime-shortcuts
    - useful slime shortcuts
      https://www.youtube.com/watch?v=sBcPNr1CKKw

** Debugging
   - (error "message" ...): shows backtrace
   - (break): go into a debugger
*** SLDB: the SLIME debugger
    https://slime.common-lisp.dev/doc/html/Debugger.html

* CFFI
  - tutorial: https://www.youtube.com/watch?v=lvHi5LyhxGk

* Note
** Function arguments
   http://www.gigamonkeys.com/book/functions.html
   addtional arguments: optional, rest, keyword

** function(#') and lambda
   https://stackoverflow.com/a/29346982/6710003

   The results of following expresions are same:
   > #'(lambda ...)
   > (function (lambda ...))
   > (lambda ...)

   because lambda is a macro and the expanded form include function:
   > (macroexpand-1 '(lambda (x) (+ x x x)))
   ==> (function (lambda (x) (+ x x x)))

** Macro
   - examples: https://lispcookbook.github.io/cl-cookbook/macros.html

* Lisp functions
** (load "file-path.ext")
** (apropos "some-substring")
   search for interned symbols whose names contain the substring
