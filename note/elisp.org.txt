
* native emacs-lisp functions

* common lisp functions
** cl-remove-if-not
remains items that satisfy the predicate
e.g.
#+begin_src elisp
(require 'cl-lib)
(cl-remove-if-not (lambda (x) (> x 3)) '(1 3 2 4 6 0 2 5))
#+end_src

* setq-default
https://stackoverflow.com/a/22673010
https://stackoverflow.com/a/18173666
https://www.gnu.org/software/emacs/manual/html_node/elisp/Intro-to-Buffer_002dLocal.html

if a variable is buffer-local, it allows the variable to have a global value and local values for buffers
otherwise, setq-default and setq have no difference
- use 'make-local-variable' to declare a buffer-local variable in a specific buffer
  you should call 'make-local-variable' for each buffer to declare and use the buffer-local variable
  e.g. (make-local-variable 'some-variable-symbol)
- 'setq-default' assigns a variable a global value
- 'setq' assigns a variable a local value for the current buffer
- 'setq-local' assigns ...

* package
** define-package
"define-package" declare a package
** package-activated-list
https://emacs.stackexchange.com/a/44378
"package-activated-list" is the list of loaded packages
#+begin_src elisp
package-activated-list
#+end_src
** featurep
chekc if a feature is available
#+begin_src elisp
(featurep 'some-package) # nil
(provide 'some-package)
(featurep 'some-package) # t
#+end_src
** with-eval-after-load
*** evaluate when a feature is provided
#+begin_src elisp
(with-eval-after-load 'dired
  (comment do something))
#+end_src
*** evaluate when a file with a matched name is loaded
Assume that the file name is: "~/.emacs.d/some/path/to/file.el"
Then, following expressions are evaluated when the file is loaded:
#+begin_src elisp
(with-eval-after-load "file"
  (comment do something))

(with-eval-after-load "file.el"
  (comment do something))

(with-eval-after-load "~/.emacs.d/some/path/to/file.el"
  (comment do something))

(with-eval-after-load "~/.emacs.d/some/path/to/file"
  (comment do something))

(with-eval-after-load "path/to/file"
  (comment do something))
#+end_src

* functions
** executable-find
check if an executable exists
e.g.
$ (executable-find "pdfgrep")
** key-description
https://stackoverflow.com/a/7292684
key-description is the reverse of kbd
#+begin_src elisp
(key-description (kbd "M-DEL"))
;; (key-description [134217855])
#+end_src
** shell-command-to-string
https://stackoverflow.com/a/12292714
shell-command-to-string makes the output of a bash command as string
#+begin_src sh
(shell-command-to-string "ls -a")
#+end_src
** string-to-*
convert a string to a list, a vector, or a character
#+begin_src sh
(string-to-list (kbd "C-n C-n"))
(string-to-vector (kbd "C-n C-n"))
(string-to-char (kbd "C-n"))
#+end_src

* path of emacs lisp script file
https://stackoverflow.com/a/26991492/6710003

when an elisp file is loaded, the value of ~load-file-name~ variable is the path to the loaded elisp file

#+begin_src elisp
(defconst path-to-script-file load-file-name)
(defconst path-to-directory-of-script (file-name-directory load-file-name))
#+end_src

* finding a directory path containing a specific file name
https://stackoverflow.com/a/64020275/6710003

- ~locate-dominating-file~: starting at FILE, look up directory hierarchy for directory containing NAME.
- It can be used to find the path to a emacs lisp script, such as ".dir-locals.el".

#+begin_src elisp
;; return the directory path containing ".dir-locals.el"
(locate-dominating-file default-directory ".dir-locals.el")

;; return the directory path containing ".git"
(locate-dominating-file default-directory ".git")
#+end_src

* font-lock-mode
** font-lock-keyword-face example
http://xahlee.info/emacs/emacs/elisp_font_lock_mode.html

#+begin_src elisp
;; a simple major mode, my-mode
(defvar my-highlights nil "first element for `font-lock-defaults'")

(setq my-highlights
      '(("<h1>\\|</h1>" . 'font-lock-function-name-face)
        ("<h1>\\([^<]+?\\)</h1>" . (1 'font-lock-constant-face))
        ("<h1>\\(<h2>\\([^<]+?\\)</h2>\\)</h1>" . (2 'font-lock-comment-face))))

(define-derived-mode my-mode fundamental-mode "my"
  "major mode for editing my language code."
  (setq font-lock-defaults '(my-highlights)))
#+end_src
where integer 1 and 2 means the level of nested parenthesis to applied to faces

#+begin_example
<h1>first</h1>
<h1><h2>second</h2></h1>
#+end_example
- the face of "first" is 'font-lock-constant-face
- the face of "second" is 'font-lock-comment-face

* get the mapped function from a key
https://stackoverflow.com/a/15647443
https://www.gnu.org/software/emacs/manual/html_node/elisp/Functions-for-Key-Lookup.html
** functions from a key of the current keymaps
#+begin_src elisp
(key-binding (kbd "C-h m"))
#+end_src
** functions from a key of a specific map
#+begin_src elisp
(lookup-key (current-global-map) (kbd "TAB")) ; => indent-for-tab-command
(lookup-key org-mode-map (kbd "TAB")) ; => org-cycle
(lookup-key text-mode-map (kbd "TAB")) ; => nil
(lookup-key isearch-mode-map (kbd "TAB")) ; => isearch-printing-char
#+end_src

* unbind global commands
#+begin_src elisp
(mapcar #'global-unset-key (where-is-internal 'make-frame-command))
#+end_src

* get the mapped key from a function
https://emacs.stackexchange.com/a/54260
#+begin_src elisp
(substitute-command-keys "\\[keyboard-quit]") ; "C-g"
(substitute-command-keys "\\[org-ctrl-c-ctrl-c]") ; "C-c C-c"

* re-mapping key binding
https://www.reddit.com/r/emacs/comments/gp9u2m/comment/frkpk10/?utm_source=share&utm_medium=web2x&context=3
use "remap" to change the mapped function.
#+begin_src elisp
(define-key company-mode-map [remap indent-for-tab-command] #'company-indent-or-complete-common)
#+end_src

* hook
** minor mode hook
https://emacs.stackexchange.com/a/47092
minor mode's hook is called both when activating and deactivating the minor mode

e.g.
#+begin_src elisp
(add-hook 'my-minor-mode-name-hook
          (lambda ()
            (if my-minor-mode-name
                (add-hook 'after-save-hook #'a-func-from-my-minor-mode nil t)
              (remove-hook 'after-save-hook #'a-func-from-my-minor-mode t))))
#+end_src

** buffer-local add-hook
https://emacs.stackexchange.com/a/47092

when 4th argument of ~add-hook~ is non-nil, the hook becomes buffer-local

e.g.
#+begin_src elisp
(add-hook 'my-minor-mode-name-hook
          (lambda ()
            (if my-minor-mode-name
                (add-hook 'after-save-hook #'a-func-from-my-minor-mode nil t)
              (remove-hook 'after-save-hook #'a-func-from-my-minor-mode t))))
#+end_src

when ~my-minor-mode~ is activated, ~a-func-from-my-minor-mode~ is added to the buffer-local ~after-save-hook~.
when ~my-minor-mode~ is deactivated, ~a-func-from-my-minor-mode~ is removed from the buffer-local ~after-save-hook~.

* change indentation of a macro
e.g. change indentation of user-defined macro "comment"
#+begin_src elisp
(defmacro comment (&rest args)
  `nil)

(progn
  ;; fix emacs-lisp's indentation as common-lisp's
  ;; https://emacs.stackexchange.com/a/13202
  (require 'cl-indent)
  (progn
    ;; emacs-lisp's indentation
    (put 'comment 'lisp-indent-function
         (get 'progn 'common-lisp-indent-function)))
  (progn
    ;; common-lisp's indentation
    (put 'comment 'common-lisp-indent-function
         (get 'progn 'common-lisp-indent-function))))
#+end_src
where "comment" has the same indentation rule with "progn"

* change cursor color
** check color code
~M-x list-colors-display~
** change GUI emacs cursor color
https://stackoverflow.com/a/4932922
#+begin_src elisp
(set-cursor-color "#ffffff")  ; white
(set-cursor-color "red")
(set-cursor-color "cyan")
(set-cursor-color "orchid")
#+end_src
** change terminal emacs cursor color
#+begin_src elisp
(send-string-to-terminal "\033]12;#ffffff\007")
(send-string-to-terminal "\033]12;red\007")
(send-string-to-terminal "\033]12;orchid\007")
#+end_src
** get GUI emacs cursor color
#+begin_src elisp
(face-attribute 'cursor :background)
#+end_src
