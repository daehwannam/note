
* Emacs execution
** emacs without gui
   $ emacs --no-window-system
   $ or
   $ emacs -nw
** multiple daemon
   https://emacs.stackexchange.com/questions/495/multiple-emacs-instances-each-with-their-own-server/505#505
   $ emacs --daemon=workspaceN
   $ emacsclient -t -s workspaceN
*** list daemons
    $ ps -fu dhnam | grep "emacs --daemon"
** user-defined command-line arguments
   https://stackoverflow.com/a/2112346/6710003
   https://stackoverflow.com/questions/10909738/emacs-custom-command-line-arguments

* Command
** Esc-=: count lines
*** Be careful of Alt-= in Putty
    It changes the default character set.
** Removing dependencies
   M-x package-autoremove
** rectangle-mark-mode
   https://stackoverflow.com/a/25068794
** cua-selection-mode
   mode for visible rectangle region
   - cua-set-rectangle-mark (C-RET): enagle/disable rectangle-mark

** Finding files depending of old cl package
   https://github.com/hlissner/doom-emacs/issues/3372
   (require 'loadhist)
   (file-dependents (feature-file 'cl))
** Find files by names
   https://emacs.stackexchange.com/a/29001/26068
   M-x find-name-dired  ; requires regex such as "*some-file*" (a file name containing "some-file")
** GUI emacs font size change (text-scale-adjust)
   - increase font size
     - C-x C-=
     - C-x C-+p
   - decrease font size
     - C-x C--
   - set to default font size
     - C-x C-0
** set-fill-prefix: remembering prefix of the current line
   - it's bound to "C-x ."
   - Then, "M-j" (default-indent-new-line) fills the new line with the prefix
   - To cancel the effect, move the cursor to the beginning of the current line, then call 'set-fill-prefix
** indent-rigidly
   https://emacs.stackexchange.com/a/9467
   indent-rigidly (C-x TAB)
** window configuration
   https://emacs.stackexchange.com/a/2714/26068
   - window-configuration-to-register (C-x r w <char>): save window configuration
   - jump-to-register (C-x r j <char>): apply the configuration
** python commands
*** run-python
    - 'run-python is mapped to C-c C-p in *.py file
    - when the command is initially executed,
      python process's working directory is the path of the current buffer
    - when the python processe is terminated, but the buffer is not killed,
      the buffer keeps its working directory,
      and newly-created process inherits the working directory
    - run-python can make multiple python shells with a prefix argument (e.g. C-u M-x run-python)
      where you should say "yes" about the prompt "Make dedicated process?"
      however, dedicated process cannot interactively work with buffers of python files
*** python-shell-switch-to-shell
    - 'python-shell-switch-to-shell is mapepd to C-c C-z in *.py file
    - it switches to the buffer of python shell executed by 'run-python
*** python-shell-send-buffer
    - 'python-shell-send-buffer is mapepd to C-c C-c in *.py file
    - the command sends the entire code of the current buffer
*** python-shell-send-region
    - 'python-shell-send-buffer is mapepd to C-c C-r in *.py file
    - the command sends the code of the current region
*** miscellaneous
    there are other commands whose names start with "python-shell-"
** See running processes
*** emacs internal processes
    https://emacs.stackexchange.com/a/28066
    M-x list-processes
*** display system processes
    https://emacs.stackexchange.com/a/48285
    M-x proced
**** display all processes
     https://www.reddit.com/r/emacs/comments/3vanut/comment/cxlvo1w/?utm_source=share&utm_medium=web2x&context=3
     - type "f"
     - insert "all"
** Async-shell-command shell command
   M-x async-shell-command
   or
   M-&
** Exception handling
   https://curiousprogrammer.wordpress.com/2009/06/08/error-handling-in-emacs-lisp/
** Debug with Edebug
   https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html
*** eval-defun (C-M-x)
    - move cursor after a function call (or a s-expression)
    - type C-M-x, then debugger starts inside the function
    - or type C-u C-M-x, then debugger starts from the s-expression, rather then inside the function
*** edebug-all-defs
    - M-x edebug-all-defs toggles the value of the variable edebug-all-defs
    - when edebug-all-defs is true, you can debug an interactive command by M-x some-command
** toggle-menu-bar-mode-from-frame
   enable/disable menu-bar

* My command
** xah-open-in-external-app
   it opens a file with an external program within dired-mode.

* Customize
** Emacs terminal key translation
   In terminal, some keystroke is translated as another one.

   See the StackExchange answer
   https://emacs.stackexchange.com/a/2531
   "when pressing C-/ in terminal, it actually invokes C-_."   
** Change text colors with describe-char
   https://emacs.stackexchange.com/a/18199/26068
# ** Enhance mark & region selection speed
#    https://www.reddit.com/r/emacs/comments/7wezb4/how_can_i_make_line_rendering_faster/
#    - disable 'font-lock-mode
#    - other comments
#      main things to make sure are (some other has mentioned):
#      - very long lines is a problem. e.g. over 1k chars per line. If you have a single line that's few k chars, emacs essentially freezes. (this is common in minified js html css)
#      - make sure it's not font-lock problem. M-x fundamental-mode and or M-x font-lock-mode to turn it off.
#      - linum-mode makes emacs super slow. Turn it off.
#      - lots rare unicode characters in buffer makes emacs slow.
** Local variable
*** directory-local
    https://blog.allardhendriksen.nl/posts/tracking-project-virtual-environments-with-pyvenv-tracking-mode/
    https://endlessparentheses.com/a-quick-guide-to-directory-local-variables.html

    - Move to the project root
    - M-x add-dir-local-variable
      - python-mode
      - pyvenv-workon --> some-python-environment
*** file local variable
    https://www.gnu.org/software/emacs/manual/html_node/emacs/Specifying-File-Variables.html
    https://stackoverflow.com/questions/23154306/org-mode-file-specific-functions

    Example of local varaible setup for org-mode:
    - With the first line:
      #+begin_example
      # -*- eval: (message "foo"); -*-
      #+end_example

    - Or starts with "Local Variables"
      #+begin_example
      # Local Variables:
      # eval: (message "foo")
      # End:
      #+end_example
** Key binding to function
   https://stackoverflow.com/a/15647443
** Code Characters for interactive
   https://www.gnu.org/software/emacs/manual/html_node/elisp/Interactive-Codes.html#Interactive-Codes
** change entire font size
   https://stackoverflow.com/a/296316
   (set-face-attribute 'default nil :height 120)
** running custom shell commands
   https://stackoverflow.com/a/12228646
   alias, script or custom command defined in ~/.bashrc can be used once BASH_ENV is set to the config
   $ BASH_ENV=~/.bashrc emacs

* Install Emacs
** Emacs 25
   https://askubuntu.com/a/851646
   sudo add-apt-repository ppa:kelleyk/emacs
   sudo apt-get update
   sudo apt-get install emacs25
** Install emacs with conda-forge
   https://anaconda.org/conda-forge/emacs
   $ conda install -c conda-forge emacs
   eamcs can be installed in virtual env
** Installing source
   https://emacs.stackexchange.com/questions/7184/where-are-emacs-lisp-files
   sudo apt-get install emacs25-el
*** Old way
**** Download
     download emacs source code from https://github.com/emacs-mirror/emacs
     e.g. wget https://github.com/emacs-mirror/emacs/archive/emacs-25.3.zip
**** Commands
     cd /tmp
     wget https://github.com/emacs-mirror/emacs/archive/emacs-25.3.zip
     unzip emacs-25.3.zip
     cp -R emacs-emacs-25.3/lisp/* /usr/share/emacs/25.3/lisp
** Install emacs with snap
   it's compiled with native-comp option
   https://www.reddit.com/r/emacs/comments/ob5pzw/comment/h3ne358/?utm_source=share&utm_medium=web2x&context=3
*** install snap
    $ sudo apt update
    $ sudo apt install snapd
*** install emacs
    $ sudo snap install emacs --edge --classic
    # $ sudo snap install emacs --classic
*** uninstall
    $ sudo snap remove <package>
*** path to the emacs
    "/snap/emacs/current/usr/bin/emacs"
** build emacs with native comp
   https://gist.github.com/kiennq/0f3e65098725b1f9708da8c92972e705
   - install
     #+begin_src sh
     git clone git://git.savannah.gnu.org/emacs.git --depth=1
     cd emacs
     # git fetch origin feature/native-comp

     sudo add-apt-repository -y ppa:ubuntu-toolchain-r/ppa
     sudo apt install -y autoconf make checkinstall texinfo libxpm-dev libjpeg-dev \
          libgif-dev libtiff-dev libpng-dev libgnutls28-dev libncurses5-dev \
          libjansson-dev libharfbuzz-dev libgccjit-10-dev gcc-10 g++-10
     sudo apt update
     sudo apt -y upgrade

     sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 10
     sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 10

     ./autogen.sh
     ./configure --with-json --with-modules --with-harfbuzz --with-compress-install \
                 --with-threads --with-included-regex --with-zlib --with-cairo --without-rsvg\
                 --without-sound --without-imagemagick  --without-toolkit-scroll-bars \
                 --without-gpm --without-dbus --without-makeinfo --without-pop \
                 --without-mailutils --without-gsettings --with-nativecomp
     make NATIVE_FULL_AOT=1 -j$(nproc)
     sudo checkinstall -y -D --pkgname=emacs-nativecomp --pkgversion=1$(git rev-parse --short HEAD) \
          --requires="libjansson-dev,libharfbuzz-dev,libgccjit-10-dev" --pkggroup=emacs --gzman=yes \
          make install-strip
     #+end_src

   - after installation, you can see the message below
     #+begin_example
     Done. The new package has been installed and saved to
     /home/dhnam/program/emacs/emacs-nativecomp_1f03d0de-1_amd64.deb
     You can remove it from your system anytime using: 
     $ dpkg -r emacs-nativecomp
     #+end_example

   - (optional )re-install emacs from .deb
     #+begin_src sh
     sudo dpkg -i emacs-nativecomp_1f03d0de-1_amd64.deb
     #+end_src

** build emacs with native comp 2
>>>>>>> 51beffc2164f9957db18e0de48ddffb694f198d2
   https://sangwoo-joh.github.io/emacs-native-comp
   #+begin_src sh
   git clone git://git.savannah.gnu.org/emacs.git --depth=1
   cd emacs
   # git fetch origin feature/native-comp
   #+end_src

   #+begin_src sh
   sudo apt install autoconf
   sudo apt-get install texinfo
   sudo apt install libgtk-3-dev
   sudo apt install libxpm-dev libgif-dev libungif-bin gnutls-bin
   #+end_src

   #+begin_src sh
   sudo add-apt-repository ppa:ubuntu-toolchain-r/test
   sudo apt-get install gcc-10 g++-10 libgccjit0 libgccjit-10-dev libjansson4 libjansson-dev
   export CC=/usr/bin/gcc-10 CXX=/usr/bin/gcc-10
   ./autogen.sh
   ./configure --with-nativecomp
   make -jN
   sudo make install
   emacs --version  # shows GNU Emacs 28.0.50
   #+end_src
** check if native comp is applied
   https://www.reddit.com/r/emacs/comments/kco74y/comment/gfsby8c/?utm_source=share&utm_medium=web2x&context=3

   C-h f (or M-x describe-function) company-complete
   #+begin_example
   company-complete is an interactive native compiled Lisp function in ‘company.el’.
   #+end_example

* Package install
** Manual install
   M-x package-install RET auctex RET
** Check if a package is installed
   https://stackoverflow.com/a/41775524
   (package-installed-p 'auctex)
   (package-installed-p 'counsel)
   (package-installed-p 'swiper)

* Modes & Packages
** Evil
*** Evil-collection
    https://github.com/emacs-evil/evil-collection
** Advice
*** Evil vs Emacs
    - https://stackoverflow.com/questions/43380067/why-would-you-prefer-spacemacs-over-emacs-running-on-evil-mode
** Link
   https://orgmode.org/manual/Handling-links.html
   - C-c l     (org-store-link)
   - C-c C-l     (org-insert-link)
   - C-c C-o     (org-open-at-point)
** Dired
*** dired-do-shell-command
    https://stackoverflow.com/a/380013
*** wdired-mode
    https://stackoverflow.com/a/49472114
    wdired-change-to-wdired-mode can change symbol link.
*** dired-mode compression commands
    https://emacs.stackexchange.com/questions/20833/how-to-deal-with-zip-archives-in-dired
    - dired-do-compress: Z
    - dired-do-compress-to: c
*** Change files names in dired
    - C-x C-q: dired-toggle-read-only
      - C-c C-c: apply changes
      - C-c ESC: abort
*** Find files by name with regex
    M-x find-name-dired
*** Export
**** to pdf
     C-c C-e l p (org-latex-export-to-pdf)

** Tramp
*** Remote
    C-x C-f /ssh:you@remotehost:/home/user/file
*** SCP rather than ssh
    https://emacs.stackexchange.com/a/13802
    C-x C-f /scp:you@remotehost:/home/user/file
    This use ssh when file size is small and scp when file size is large
*** Sudo
    C-x C-f /sudo::/home/user/file
*** Multi-hop
    https://stackoverflow.com/questions/2177687/open-file-via-ssh-and-sudo-with-emacs
    /ssh:you1@remotehost1|ssh:you2@remotehost2:/path
    /ssh:you@remotehost|sudo:remotehost:/path/to/file
    /ssh:you@remotehost#12345|sudo::/path/to/file
*** Specific port
    /ssh:you@remotehost#33333:/home/user/file
*** From windows emacs
    /plink:you@remotehost#33333:/home/user
*** Various protocols
**** rclone
     /rclone:storage:/path/to/file
**** ftp
     /ftp:user@remotehost:/path/to/file
** Desktop mode & window register
   https://stackoverflow.com/a/46146046
   https://stackoverflow.com/a/2575269
   - frameset-to-register: C-x r f
   - jump-to-register: C-x r j
** Desktop mode save/load
   save and load configuration file from a specific directory

   M-x desktop-save
   M-x desktop-change-dir
** Hydra
   - examples:
     https://github.com/abo-abo/hydra/wiki/Emacs
** ansi-term
   - M-x ansi-term
   - C-u M-x ansi-term  # for another ansi-term
** eshell
   - M-x eshell
   - C-u M-x eshell  # for another eshell

   - eshell works with GNU screen
** Counsel & swiper
   - Raw-string match
     Use the below command during ivy search.
     M-r: ivy-toggle-regexp-quote
** ido
*** using command without id
    https://stackoverflow.com/questions/6771664/disable-ido-mode-for-specific-commands
    ido is disabled in come commands by repeatedly hitting the last key.
    
    ido-magic-forward-char (C-f) disables ido
    e.g.
    - C-x C-b ... C-f  switch to ‘ido-find-file’.
    - C-x C-f ... C-f  fallback to non-Ido ‘find-file’.
    - C-x C-d ... C-f  fallback to non-Ido brief ‘dired’.
    - C-x d ... C-f    fallback to non-Ido ‘dired’.

    ido-copy-current-file-name changes 'ido-write-file' to write-file'
** Flyspell
   - aspell for Windows
     - http://aspell.net/win32/
     - after install, update add path to the 'bin' directory to 'Path' variable
** pdf-tools
   - install
     1) M-x package-install pdf-tools
     2) M-x pdf-tools-install
   - Fit Height / Width / Page
     H / W / P
** EWW
   https://gnu.huihoo.org/emacs/manual/eww/Basics.html
   open url or search keywords
   change 'eww-search-prefix with another value to chagne the default search engine
   - open in another buffer
     use prefix argument to open web page in another buffer
     e.g. C-u M-x eww

* KeyChanges
** Windows: auto-hot key
   $Ctrl::CapsLock
   $CapsLock::Ctrl
*** run on startup
    http://autohotkey.com/docs/FAQ.htm#Startup
    1. Find the script file, select it, and press Control+C.
    2. Press Win+R to open the Run dialog, then enter shell:startup and click OK or Enter. This will open the Startup folder for the current user. To instead open the folder for all users, enter shell:common startup (however, in that case you must be an administrator to proceed).
    3. Right click inside the window, and click "Paste Shortcut". The shortcut to the script should now be in the Startup folder.
** Linux
*** Ubuntu
**** gnome-tweak-tool (CapsLock as Ctrl - Not swapping)
     - install gnome-tweak-tool
       $ sudo apt-get install gnome-tweak-tool
     - run gnome-tweak-tool
       $ gnome-tweaks
       $ # or
       $ gnome-tweak-tool
     - Keyboard & Mouse -> Keyboard -> Additional Layout Options
       -> Ctrl position (or Caps Lock behavior)
**** remapping key for virtual console (tty terminal)
     https://askubuntu.com/a/44125
***** simple version
      https://wiki.kldp.org/HOWTO/html/Keyboard-and-Console/Keyboard-and-Console-HOWTO-15.html
      $ echo -e "$(sudo dumpkeys | grep ^keymaps)\nkeycode 58 = Control\nkeycode 29 = Caps_Lock" | sudo loadkeys
      or
      #+begin_src sh
      sudo loadkeys
      keymaps 0-15
      keycode 58 = Control
      keycode 29 = Caps_Lock
      #+end_src
***** detailed version
      https://linuxcommando.blogspot.com/2008/03/remap-caps-lock-key-for-virtual-console.html
      - Find key codes
        showkey command print codes of typed keys for 10 seconds
        $ sudo showkey
        - Caps Lock: code 58
      - Find symbolic names of keys
        $ sudo dumpkeys -l |grep -i ctrl
        - Left Ctrl has symbolic name of "CtrlL"
          (Catuion: the name CtrlL would not work in virtual console)
      - Map a key code to a symbolic name
        $ echo -e "$(sudo dumpkeys | grep ^keymaps)\nkeycode 58 = Control\nkeycode 29 = Caps_Lock" | sudo loadkeys
**** Keyboard configuration with XKBOPTIONS
     https://askubuntu.com/a/418773
     https://superuser.com/a/623453
     - Update "/etc/default/keyboard"
       (initial option -> XKBOPTIONS="")
       #+begin_example
       XKBOPTIONS="ctrl:swapcaps"
       #+end_example
     - Reconfigure
       https://wiki.debian.org/Keyboard
       $ sudo dpkg-reconfigure keyboard-configuration
       $ service keyboard-setup restart 
*** xmodemap
    https://unix.stackexchange.com/questions/107566/how-to-swap-ctrl-and-capslock-using-xmodmap
    https://destinmoulton.com/blog/2020/remap-capslock-to-ctrl-with-xmodmap-automatically-on-startup/

    - Configuration file: ~/.Xmodmap
      #+begin_example
      !
      ! Swap Caps_Lock and Control_L
      !
      remove Lock = Caps_Lock
      remove Control = Control_L
      remove Lock = Control_L
      remove Control = Caps_Lock
      keysym Control_L = Caps_Lock
      keysym Caps_Lock = Control_L
      add Lock = Caps_Lock
      add Control = Control_L
      #+end_example

    - Running Xmodemap
      $ xmodmap ~/.Xmodmap

    - Startup setting
      (todo)
*** others
    - autokey

* Bug fix
** Server socket permission denied
   https://github.com/magit/with-editor/issues/7#issuecomment-548822576

   When you encounter a message like "Creating directory: Permission
   denied, /run/user/1001", You need to change 'server-socket-dir.

   (I saw the bug when I use magit operations, where the linux account
   doesn't have root privilege)

   #+begin_src elisp
(setq
 server-name "emacs"
 ;; default server-socket-dir is (getenv "XDG_RUNTIME_DIR")
 server-socket-dir "/home/user-account/emacs-server-socket")
   #+end_src
