* Input method
** ibus
*** ibus korean keyboard setting
https://pstudio411.tistory.com/entry/Ubuntu-2004-%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5-%EB%B0%A9%EB%B2%95
remove "Korean" from "Installed Languages" and reinstall it
if "Hangul" cannot be added to ibus's Input Method

** fcitx
*** fcitx korean settting
https://velog.io/@yujo/Ubuntu-20.04%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5%EA%B8%B0-%EC%84%A4%EC%B9%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0
- install
  #+begin_src sh
  sudo apt-get update
  sudo apt-get install fcitx-hangul
  #+end_src
- "Setting" -> "Region & Language" -> "Manage installed Languages"
  - if a prompt for update occurs, execute the update
  - "Keyboard input method system" -> "fcitx"
- reboot
**** disable fcitx shortcuts
https://askubuntu.com/a/884288
- edit "/usr/share/fcitx/addon/fcitx-vk.conf"
- add "Enable=False"
**** fcitx config
#+begin_src sh
fcitx-configtool
#+end_src
**** add Hangul input method
- Input Method
- click "+"
- search "Hangul" and press "OK"
- Make "Hangul" has the highest priority
**** Change hot key
- Global Config
- Trigger Input Method
- press <Hangul> key
**** set default language
- open config
  #+begin_src sh
  fcitx-configtool
  #+end_src
- Global Config
- Show Advanced Options (at the left bottom corner)
- Program
- Default Input Method State -> Active
*** error fix for typing korean in gnome
https://github.com/fcitx/fcitx-hangul/issues/4#issuecomment-282241511
#+begin_src sh
gsettings set org.gnome.settings-daemon.plugins.keyboard active false
#+end_src
*** configuration
**** configuration command
#+begin_src sh
fcitx-configtool
#+end_src
**** clipboard
***** clipboard configuration
https://askubuntu.com/a/1118996

- Entering configuration:
  "Addon" -> "Clipboard (Fcitx Clipboard access)"
- Disabling clipboard trigger shortcuts:
  "Trigger key for clipboard history list" -> Click and hit "Esc" to clear the setting
  (The default value is "Ctrl-;")
- Disabling to save clipboard:
  Uncheck "Save Clipboard History To File"
***** clipboard history path
https://forums.linuxmint.com/viewtopic.php?t=374026#top
#+begin_example
~/.config/fcitx/clipboard/history.dat
~/.config/fcitx/conf/fcitx-clipboard.config
#+end_example
**** QuickPhrase
- Entering configuration:
  "Addon" -> "Quickphrase"
- Disabling QuickPhrase:
  "Trigger Key for QuickPhrase" -> "None"
  (The default value is "Semicolon")

* Power management
** optimize linux laptop battery life with 'tlp'
https://pstudio411.tistory.com/entry/Ubuntu-2004-%EB%85%B8%ED%8A%B8%EB%B6%81%EC%97%94-%ED%95%84%EC%88%98-%EC%A0%84%EC%9B%90-%EA%B4%80%EB%A6%AC

*** tlp
power managerment tool
- install
  #+begin_src sh
  sudo add-apt-repository ppa:linrunner/tlp
  sudo apt update
  sudo apt install tlp tlp-rdw

  sudo tlp start
  #+end_src
- configuration file path
  /etc/tlp.conf
- check status
  #+begin_src sh
  tlp-stat -s
  #+end_src

*** Slimbook Battery
https://itlearningcenter.tistory.com/entry/%E3%80%90Ubuntu-2004-LTS%E3%80%91%EB%85%B8%ED%8A%B8%EB%B6%81-%EC%A0%84%EC%9B%90-%EA%B4%80%EB%A6%AC-%EB%8F%84%EA%B5%AC-%EC%84%A4%EC%B9%98
"Slimbook Battery" is tlp-based GUI tool

**** install
#+begin_src bash
sudo add-apt-repository ppa:slimbook/slimbook
sudo apt-get update
sudo apt-get install slimbookbattery
#+end_src
**** bug fix
***** <ModuleNotFoundError: No module named 'gi'>
#+begin_src sh
conda install -c conda-forge pygobject
#+end_src
***** ValueError: Namespace Gtk not available
#+begin_src sh
conda install -c conda-forge gtk3
#+end_src
**** usage
- run "Slimbook Battery" application
- enable the option "Autostart application"
- modify screen brightness for Saving/Balanced/Maximum modes

* Office
** HWP
*** install
- install HWP from .deb file
  https://nooree.com/74
  - download .deb file
    https://drive.google.com/file/d/1aZCLTv8HVPIWRXFtNx8X1xx-AoI9TwSH/view?usp=sharing
  - install .deb file
    #+begin_src sh
    sudo dpkg -i hoffice-hwp_11.20.0.989_amd64.deb
    #+end_src
- change language to Korean
  https://hamonikr.org/Free_Board/88075
  http://no1linux.org/screenshot/37778
  update "/usr/share/applications/hoffice11-hwp.desktop"
  #+begin_example
  Exec=/bin/bash -c "LANGUAGE=ko_KR /opt/hnc/hoffice11/Bin/hwp %f"
  #+end_example
- enable to input Korean
  https://hamonikr.org/Free_Board/85939
  #+begin_src sh
  cd /opt/hnc/hoffice11/Bin/
  sudo mv qt qt.backup
  #+end_src
  then fcitx works
- (optional) install nimf when you cannot type Korean
  https://pivox.tistory.com/44
  #+begin_src sh
  sudo apt install curl
  sudo rm -f /etc/apt/sources.list.d/hamonikr.list
  curl -sL https://pkg.hamonikr.org/add-hamonikr.apt | sudo -E bash -
  sudo apt install nimf nimf-libhangul
  im-config -n nimf
  #+end_src
*** (optional) install HWP viewer
https://nooree.com/74
- download .deb file
  https://drive.google.com/file/d/1Xv8Gd5nGlz_rPFMGMYv4u_lEvLLPyF3V/view?usp=sharing
- install .deb file
  #+begin_src sh
  sudo dpkg -i hoffice-viewer_11.20.0.991_amd64.deb
  #+end_src
** LibreOffice
file:~/record/note/libre-office.org.txt
** OnlyOffice
https://askubuntu.com/a/1332488
*** License
https://en.wikipedia.org/wiki/OnlyOffice#Desktop_editors
OnlyOffice Desktop is offered free of charge for both personal and commercial usage
*** install
- .dep install
  https://www.onlyoffice.com/download-desktop.aspx
  #+begin_src sh
  sudo dpkg -i onlyoffice-desktopeditors_amd64.deb
  #+end_src
- snap install
  #+begin_src sh
  snap install onlyoffice-desktopeditors
  #+end_src
*** change default language for new document
#+begin_src sh
cd /opt/onlyoffice/desktopeditors/converter/empty
sudo mv en-US en-US-backup
sudo cp -R ko-KR en-US
#+end_src
*** direct commands to make new documents
#+begin_src sh
/usr/bin/onlyoffice-desktopeditors --new:word
/usr/bin/onlyoffice-desktopeditors --new:cell
/usr/bin/onlyoffice-desktopeditors --new:slide
#+end_src
** WPS Office
https://askubuntu.com/a/1368754
*** License
https://www.wps.com/eula/
CAUTION: No commercial entities or organizations are permitted
to use the functionally restricted version of the Software
*** install WPS
- download WPS package from https://www.wps.com/
- install WPS
  #+begin_src sh
  sudo dpkg -i wps-office_11.1.0.10702.XA_amd64.deb 
  #+end_src
*** font update from ttf-mscorefonts-installer
https://ostechnix.com/install-microsoft-windows-fonts-ubuntu-16-04/
https://kairos03.github.io/2018/09/07/ubuntu18.04-wps-office-install.html

- install font
  #+begin_src sh
  sudo apt install ttf-mscorefonts-installer
  #+end_src
- update font cache
  #+begin_src sh
  sudo fc-cache -f -v
  #+end_src
*** font update for "Wingdings, Wingdings 2, Wingdings 3, MT Extra"
https://askubuntu.com/a/1000144
#+begin_src sh
git clone https://github.com/udoyen/wps-fonts.git
sudo mv -v wps-fonts/wps/* /usr/share/fonts/wps-office
rm -Rf wps-fonts/
#+end_src
*** (optional) font update to ~/.fonts/
https://tolovefeels.tistory.com/9

Caution: it may not work

#+begin_src sh
mkdir -p ~/.fonts/
wget https://source.winehq.org/git/wine.git/blob/HEAD:/fonts/symbol.ttf -O ~/.fonts/symbol.ttf
wget https://source.winehq.org/git/wine.git/blob/HEAD:/fonts/wingding.ttf -O ~/.fonts/wingding.ttf
wget https://bmaupin.github.io/askubuntu-983191-research/symbol_msfontservice.ttf -O ~/.fonts/symbol_msfontservice.ttf
wget https://bmaupin.github.io/askubuntu-983191-research/wingdings_msfontservice.ttf -O ~/.fonts/wingdings_msfontservice.ttf
fc-cache -f -v
#+end_src

* Screenshot
** Flameshot
*** install
https://vitux.com/ubuntu-screenshot-flameshot/
#+begin_src sh
sudo apt install flameshot
#+end_src
*** usage
https://www.tecmint.com/install-flameshot-in-linux/
#+begin_src sh
flameshot gui
#+end_src
** Kazam
video recording and image capture tool
** shortcuts
Windows key + CTRL + R = Start recording.
Windows key + CTRL + P = Pause recording, press again to resume.
Windows key + CTRL + F = Finish recording.
Windows key + CTRL + W = Show/hide main window
Windows key + CTRL + Q = Quit recording.

* Recording (screencast)
** peek
*** install
#+begin_src sh
sudo apt install peek
#+end_src

** obs
*** running in wayland
https://bbs.archlinux.org/viewtopic.php?pid=2077236#p2077236

#+begin_src sh
QT_QPA_PLATFORM=xcb obs
#+end_src

* Video editing
** kdenlive
*** install
#+begin_src sh
sudo apt install kdenlive
#+end_src

* Image viewer
** Nomacs
*** install
#+begin_src sh
sudo apt install nomacs
#+end_src
** feh
image viewer
*** install
#+begin_src sh
sudo apt install feh
#+end_src
*** usage
- up/down key -> zome in/out
- open image with fitting
  #+begin_src sh
  feh --scale-down --auto-zoom
  #+end_src
*** other shortcuts
http://xahlee.info/linux/linux_feh_image_viewer_keyboard_shortcuts.html
*** change default launch option
- copy .desktop
  #+begin_src sh
  cp /usr/share/applications/feh.desktop ~/.local/share/applications/
  #+end_src
- update "Exec" in "~/.local/share/applications/"
  #+begin_src sh
  Exec=feh --scale-down --auto-zoom %F  # Exec=feh %F
  #+end_src

* Video player
** vlc
*** AB loop repeat
- View -> Advanced Controls
- Shif-L or "AB" button to set a region
*** Jump time configuration
https://askubuntu.com/a/618391

- Menu -> Tools -> Preferences
- Click "All" in "Show settings" located in the bottom left corner
- Interface -> Hotkeys settings
- You can change "jump sizes"
** MPlayer
** mpv
https://mpv.io/manual/master/
*** user-specific config location
https://mpv.io/manual/master/#files-~/-config/mpv/input-conf

- ~/.config/mpv/mpv.conf
- ~/.config/mpv/input.conf
*** example config for seek time
https://github.com/mpv-player/mpv/blob/master/etc/input.conf#L47-L57
https://github.com/mpv-player/mpv/issues/4396#issuecomment-1252020397
*** ab-loop
https://www.reddit.com/r/mpv/comments/jt0aho/comment/gc3pwfr/?utm_source=share&utm_medium=web3x&utm_name=web3xcss&utm_term=1&utm_content=share_button

The default key is "l"

* Music player
** vlc
** rhythmbox
#+begin_src sh
sudo apt-get install rhythmbox
#+end_src

* KakaoTalk
** install
https://movment.tistory.com/5
*** install wine
- install wine
  #+begin_src sh
  sudo dpkg --add-architecture i386

  wget -nc https://dl.winehq.org/wine-builds/winehq.key
  sudo apt-key add winehq.key

  # for Ubuntu 20.04 LTS
  sudo add-apt-repository 'deb https://dl.winehq.org/wine-builds/ubuntu/ focal main'

  sudo apt update
  sudo apt install --install-recommends winehq-stable
  #+end_src
- set wine for 32bit applications
  - run command
    #+begin_src sh
    WINEARCH=win32 winecfg
    #+end_src
  - don't need to install Mono and Gecko
  - set "Windows version" to "Windows 10"
*** install KakaoTalk
- download KakaoTalk for windows
  https://www.kakaocorp.com/service/KakaoTalk
- run the following command
  #+begin_src sh
  LANG="ko_KR.UTF-8" wine ~/Downloads/KakaoTalk_Setup.exe
  #+end_src
- uncheck
  - "시작메뉴에 바로가기 만들기"
  - "Daum을 시작페이지로 설정"
  otherwise, two shorcuts are created
*** language setting for KakaoTalk
- update "~/.local/share/applications/wine/Programs/카카오톡/카카오톡.desktop" by
  - adding LANG="ko_KR.UTF-8"
  #+begin_src sh
  Exec=env WINEPREFIX="/home/dhnam/.wine" LANG="ko_KR.UTF-8" wine C:\\\\windows\\\\command\\\\start.exe /Unix /home/dhnam/.wine/dosdevices/c:/ProgramData/Microsoft/Windows/Start\\ Menu/Programs/카카오톡/카카오톡.lnk
  #+end_src
- (optional) make duplicate .desktop for convenience
  - copy .desktop
    #+begin_src sh
    cp ~/.local/share/applications/wine/Programs/카카오톡/카카오톡.desktop ~/.local/share/applications/kakao-talk.desktop
    #+end_src
  - update name of "~/.local/share/applications/kakao-talk.desktop"
    #+begin_src sh
    # Name=카카오톡
    Name=KakaoTalk
    Exec=env WINEPREFIX="/home/dhnam/.wine" LANG="ko_KR.UTF-8" wine C:\\\\windows\\\\command\\\\start.exe /Unix /home/dhnam/.wine/dosdevices/c:/ProgramData/Microsoft/Windows/Start\\ Menu/Programs/카카오톡/카카오톡.lnk
    #+end_src
- log out session
*** (optional) system tray
- install topicons plus
  #+begin_src sh
  sudo apt install gnome-shell-extension-top-icons-plus
  #+end_src
- enable topicons plus
  #+begin_src sh
  gnome-tweaks
  #+end_src
  Extensions -> Topicons plus
*** (optional) fonts for korean
- Noto Sans CJK TC Medium
- Noto Sans CJK KR Medium
- 백묵 돋음

* wine
** patch
- https://afterthenumber.com/2019/02/14/installing-adobe-reader-for-dc-under-wine-on-ubuntu-18-04/

* lutris
- Gaming platform
- It can be combined with wine
** Install
https://linuxconfig.org/install-lutris-on-ubuntu-20-04-focal-fossa-linux
** Usage
https://horangi.tistory.com/437
** e-sync & f-sync
https://www.reddit.com/r/Lutris/comments/u2vsqa/comment/i4md9wq/

* PDF reader
** okular
*** install
#+begin_src sh
sudo apt-get install okular
#+end_src
*** disable thumbnails at startup
https://forum.kde.org/viewtopic.php?f=20&t=95947
Menu -> "Settings" -> uncheck "Navigation panel"
*** inverse search setting
https://tex.stackexchange.com/questions/161797/how-to-configure-emacs-and-auctex-to-perform-forward-and-inverse-search
- Menu -> "Settings" -> "Configure Okular" -> "Editor" -> "Emacs client"
- Menu -> "Tools" -> "Browse"
- emacs server or daemon should be running
** evince
pdf viewer
*** install
#+begin_src sh
sudo apt install evince
#+end_src

* PDF split
** qpdf
- install
  #+begin_src sh
  sudo apt-get install qpdf
  #+end_src
- example
  https://askubuntu.com/a/672001
  #+begin_src sh
  qpdf input.pdf --pages . 1-20,26-32 -- output.pdf
  # Pages from 1 to 20 and 26 to 32
  #+end_src
*** qpdf vs. pdftk
https://en.wikipedia.org/wiki/QPDF
https://en.wikipedia.org/wiki/PDFtk

qpdf is newer than pdftk, and qpdf is updated frequently.

* terminal emulator
** xterm-256color
you can update "~/.bashrc" for xterm-256color but it may cause trouble with "M-x shell" or "M-x ansi-term"
#+begin_src sh
export TERM=xterm-256color
#+end_src
** Kitty
https://sw.kovidgoyal.net/kitty/
https://github.com/kovidgoyal/kitty
*** install
- installation with .deb package
  #+begin_src sh
  sudo apt install kitty
  #+end_src
- install pre-build binaries
  #+begin_src sh
  curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
  #+end_src
  =~/.local/kitty.app/bin/kitty=
*** shortcuts
- Copy: ctrl + shift + c
- Paste: ctrl + shift + v / shift + insert
- Font size increase: ctrl + shift + "+"
- Font size decrease: ctrl + shift + "-"
*** config
update "~/.config/kitty/kitty.conf"
**** font
#+begin_example
font_size 10.0
#+end_example
**** xterm-256color
https://news.ycombinator.com/item?id=24643008
#+begin_example
term xterm-256color
#+end_example
**** stop cursor blinking
https://github.com/kovidgoyal/kitty/issues/530
#+begin_example
cursor_stop_blinking_after 0.1
#+end_example
**** cursor color
#+begin_example
# cursor magenta
cursor #E38AAE
#+end_example
** Alacritty
terminal program to repace gnome-terminal
*** install
https://ubuntuhandbook.org/index.php/2020/12/install-alacritty-ppa-ubuntu-20-04/
#+begin_src sh
sudo add-apt-repository ppa:aslatter/ppa
sudo apt install alacritty
#+end_src
*** uninstall
#+begin_src sh
sudo apt remove --auto-remove alacritty
sudo add-apt-repository --remove ppa:aslatter/ppa
#+end_src
*** change theme
https://github.com/eendroroy/alacritty-theme

Update "~/.config/alacritty/alacritty.yml" with one of themes in
https://github.com/eendroroy/alacritty-theme/tree/master/themes
*** change font
https://wiki.archlinux.org/title/Alacritty#Font
Update "~/.config/alacritty/alacritty.yml" with the following code
#+begin_src 
font:
  size: 8
#+end_src
*** change default terminal
https://itsfoss.com/change-default-terminal-ubuntu/
#+begin_src sh
sudo update-alternatives --config x-terminal-emulator
#+end_src

* Xpra
https://unix.stackexchange.com/a/608235

- Xpra is the X equivalent of screen or tmux, providing a virtual X
  environment and the ability to display the desktop or individual
  application windows locally or remotely, attaching and detaching as
  necessary.
- Xpra enable to run GUI application via web browser
** installation
*** install for ubuntu
https://github.com/Xpra-org/xpra/wiki/Download#-for-debian-based-distributions

Step by step example for installing the stable repository on Ubuntu Jammy Jellyfish:
#+begin_src sh
# DISTRO=focal                    # 20.04
DISTRO=jammy                    # 22.04
#install https support for apt (which may be installed already):
sudo apt update
sudo apt install apt-transport-https software-properties-common
sudo apt install ca-certificates
# add xpra GPG key:
sudo wget -O "/usr/share/keyrings/xpra.asc" https://xpra.org/gpg.asc
# add the xpra repository:
wget -O "/etc/apt/sources.list.d/xpra.sources" https://xpra.org/repos/$DISTRO/xpra.sources
# add the optional beta channel:
# wget -O "/etc/apt/sources.list.d/xpra-beta.sources" https://xpra.org/repos/$DISTRO/xpra-beta.sources
# install the xpra package:
sudo apt update
sudo apt install xpra
#+end_src
*** build for ubuntu
**** install dependencies
https://github.com/Xpra-org/xpra/blob/master/docs/Build/Debian.md
#+begin_src sh
apt-get install libx11-dev libxtst-dev libxcomposite-dev libxdamage-dev libxres-dev \
                libxkbfile-dev \
                python-all-dev \
                pandoc \
                libsystemd-dev \
                liblz4-dev

# GTK3 for the server and GUI client:
apt-get install libgtk-3-dev python3-dev python3-cairo-dev python-gi-dev cython3

# Also install some X11 utilities if not installed already:
apt-get install xauth x11-xkb-utils

# To be able to run xpra, you are likely to need:
apt-get install xvfb python3-cairo python3-gi-cairo \
    python3-opengl python3-pil

# Other dependencies
pip install Cython
sudo apt install libavutil-dev
pip install xpra pygobject

# for "gi" module
# (or to solve the error - ModuleNotFoundError: No module named 'gi')
# https://stackoverflow.com/a/71369926
sudo apt install libcairo2-dev libxt-dev libgirepository1.0-dev
pip install pycairo PyGObject
#+end_src
**** build and install
https://github.com/Xpra-org/xpra/tree/master/docs/Build
#+begin_src sh
# INSTALL_PATH=/usr
git clone https://github.com/Xpra-org/xpra
cd xpra
# INSTALL_PATH=/home/$USER/usr
INSTALL_PATH=/usr
python3 ./setup.py install --prefix=$INSTALL_PATH
# python3 ./setup.py install  # installed as <conda-path>/envs/default/bin/xpra
cd ..
#+end_src


** commands
https://help.ubuntu.com/community/Xpra

| command                          | description                              |
|----------------------------------+------------------------------------------|
| xpra list                        | list xpra servers                        |
| xpra attach :100                 | show xpra servers                        |
| xpra attach :7                   | attach to display :7                     |
| xpra attach ssh:server-address:7 | attach to display :7 in a server via ssh |
| xpra stop :7                     | stop the server of display :7            |

** examples
*** attach to local host
**** make a daemon process
#+begin_src sh
xpra start :100 --start=kitty
#+end_src
where :100 is DISPLAY
**** attach to the daemon
#+begin_src sh
xpra attach :100
#+end_src
*** attach to remote host
https://bytexd.com/xpra/
**** server
#+begin_src sh
xpra start :100 --start=kitty
#+end_src
where :100 is DISPLAY
**** client
#+begin_src sh
xpra attach ssh:user@server-address:100
#+end_src
*** attach to remote host via web browser
- Access a server and enable port forwarding via ssh
  #+begin_src sh
  # ssh user@address -L port:host:hostpo
  ssh user@address -L 8000:localhost:9000
  #+end_src
  Now, client's port "8000" is forwarded to the remote server's "localhost:9000"
- Run xpra in the server side
  #+begin_src sh
  # PROGRAM=xterm
  PROGRAM=kitty

  # Method1: Run a child process
  # xpra start --bind-tcp=0.0.0.0:9000 --html=on --start=$PROGRAM

  # Method2: Run a child process and exit the session when the process is terminated
  xpra start --bind-tcp=0.0.0.0:9000 --html=on --start-child=$PROGRAM --exit-with-children=yes
  #+end_src
- Access the xpra server via browser
  #+begin_src sh
  firefox localhost:8000
  #+end_src
*** directly running command in xpra on remote host
https://wiki.archlinux.org/title/Xpra#Run_application_"single_shot"
#+begin_src sh
xpra start ssh:user@host --exit-with-children --start-child="command"
#+end_src
where "--exit-with-children" options enable to exit daemon when command of "--start-child" is finished.
*** connect to xpra server via ssh with a specific ssh port
#+begin_src sh
# xpra attach ssh:user@address:some-port:display
xpra attach ssh:user@address:11111:100
#+end_src

* gotty
- gotty enable to access terminal environment via web browser
- gotty is similar to xpra except that gotty provides terminal environment rather than gui

* unclutter
hide mouse when it's not moving
** install
#+begin_src sh
sudo apt install unclutter
#+end_src
** change time waiting
https://askubuntu.com/a/684638
#+begin_src sh
unclutter -idle 3 -root
#+end_src

* amixer
a tool for configure sound
** Usage
#+begin_src sh
amixer set Master 15%
#+end_src

* xbacklight
*** install and usage
https://askubuntu.com/a/149265

- install
  #+begin_src sh
  sudo apt-get install xbacklight
  #+end_src
- increase brightness
  #+begin_src sh
  xbacklight -inc 10
  #+end_src
- decrease brightness
  #+begin_src sh
  xbacklight -dec 10 
  #+end_src

* xrandr
** change screen resolution
https://unix.stackexchange.com/a/227879
#+begin_src sh
xrandr -s 800x60n0
#+end_src

* xset
** Change screen saver time
https://askubuntu.com/a/764844
#+begin_src sh
xset dpms 0 0 1800  # 30 mins
#+end_src

The 1st and 2nd zeros means disabling 'standby' and 'suspend'
- 'standby' mode usually puts all devices in a low-power state,
   and only keeps system memory refreshed and the CPU idling.
   https://www.techrepublic.com/article/are-you-sleeping-understanding-hibernation-standby-and-other-power-management-features/
** Change screen saver time 2
https://wiki.archlinux.org/title/Display_Power_Management_Signaling#Modify_DPMS_and_screensaver_settings_with_a_command
#+begin_src sh
xset s 1800 1800
#+end_src

* Drawing
** Inkscape
*** install
https://inkscape.org/ko/release/inkscape-1.0/gnulinux/ubuntu/ppa/dl/
#+begin_src sh
sudo add-apt-repository ppa:inkscape.dev/stable
sudo apt update
sudo apt install inkscape
#+end_src
*** tutorial
https://inkscape.org/ko/learn/tutorials/
Help -> Tutorials -> ...
*** remove svg margin
https://stackoverflow.com/a/64116358/6710003
#+begin_src sh
inkscape --export-plain-svg --export-filename="your path to the edited svg" --export-area-drawing "path to the svg with whitspace"
#+end_src
*** export
**** svg to eps
https://stackoverflow.com/a/30539923
#+begin_src sh
inkscape input.svg -o output.eps --export-ignore-filters --export-ps-level=3
#+end_src
**** svg to pdf
#+begin_src sh
inkscape input.svg -o output.pdf
#+end_src
***** deprecated method
https://mjmorse.com/blog/export-pdf-inkscape/
#+begin_src sh
inkscape --file=input.svg --without-gui --export-pdf=output.pdf
#+end_src

* scrcpy
https://sean.tistory.com/59
** install
- scrcpy
  #+begin_src sh
  sudo apt install scrcpy
  #+end_src
- other necessary packages
  #+begin_src sh
  sudo apt install adb ffmpeg libsdl2-2.0-0 make gcc pkg-config meson ninja-build libavcodec-dev libavformat-dev libavutil-dev libsdl2-dev android-tools-adb android-tools-fastboot
  #+end_src
** enable development option (개발자 옵션)
https://sean.tistory.com/23?category=874763
- 개발자 옵션 활성화
  https://sean.tistory.com/23?category=874763
  - "설정" -> "휴대전화 정보" -> "소프트웨어 정보"
  - "빌드번호" 반복 터치
- "설정" -> "개발자 옵션" -> "USB 디버깅" ON
** connect via adb & scrcpy
- Connect the mobile device with a computer via USB
- Allow USB debugging
- check the connected device
  if the device is connected it shows 'device' rather than 'unauthorized'
  e.g.
  #+begin_src sh
  adb devices
  #+end_src
  
  the expected output:
  #+begin_example
  List of devices attached
  3200eb5294938489	device
  #+end_example
- run scrcpy
  #+begin_src sh
  scrcpy
  #+end_src
* sndcpy
https://kibua20.tistory.com/182
** requirements
- vlc should be installed
  #+begin_src sh
  which vlc
  #+end_src
** install
#+begin_src sh
curl -L -O https://github.com/rom1v/sndcpy/releases/download/v1.0/sndcpy-v1.0.zip
unzip sndcpy-v1.0.zip -d ~/program/sndcpy
#+end_src
** run
#+begin_src sh
cd ~/program/sndcpy
./sndcpy
#+end_src

** Korean input
http://no1linux.org/board_WEnl84/38786
install app "Gboaard - Google keyboard"

* Zoom
** install
https://pstudio411.tistory.com/entry/Ubuntu-2004-LTS화상회의-필수인-ZOOM-설치-법

#+begin_src sh
wget https://zoom.us/client/latest/zoom_amd64.deb
sudo apt install ./zoom_amd64.deb
#+end_src

* WhatsApp
** install
https://snapcraft.io/whatsapp-for-linux
#+begin_src sh
sudo snap install whatsapp-for-linux
#+end_src

* Dropbox
** install
https://www.dropbox.com/install-linux
#+begin_src sh
cd ~ && wget -O - "https://www.dropbox.com/download?plat=lnx.x86_64" | tar xzf -

# "wget -O - <url>" means saving the file to STDOUT
#+end_src

After the commands "~/.dropboxd" is created
** Running dropbox daemon
#+begin_src sh
~/.dropbox-dist/dropboxd
#+end_src

- At the first time, it will redirect you to the dropbox page to register the new device.
- In Gnome environment, "sudo" may be required to avoid the error [[*Error: 'GTK_IS_WIDGET (widget)' failed][Error: 'GTK_IS_WIDGET (widget)' failed]]
** Error: 'GTK_IS_WIDGET (widget)' failed
Error message
#+begin_example
(dropbox:22839): Gtk-CRITICAL **: 01:52:18.296: gtk_widget_get_scale_factor: assertion 'GTK_IS_WIDGET (widget)' failed
#+end_example

* Package management tool
** snap
** flatpak
*** adding flathub repository
https://flatpak.org/setup/Ubuntu
#+begin_src sh
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
#+end_src

* Antivirus
** clamav
*** install
https://adamtheautomator.com/install-clamav-on-ubuntu/
#+begin_src sh
# install
sudo apt update -y
sudo apt install clamav clamav-daemon -y

# check version
clamscan --version
#+end_src
*** install gui-tool
#+begin_src sh
sudo apt install clamtk -y
#+end_src
