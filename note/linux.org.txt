* Initial Ubuntu setup
** optimize linux laptop battery life with 'tlp'
   https://pstudio411.tistory.com/entry/Ubuntu-2004-%EB%85%B8%ED%8A%B8%EB%B6%81%EC%97%94-%ED%95%84%EC%88%98-%EC%A0%84%EC%9B%90-%EA%B4%80%EB%A6%AC
*** tlp
    power managerment tool
    - install
      #+begin_src sh
      sudo add-apt-repository ppa:linrunner/tlp
      sudo apt update
      sudo apt install tlp tlp-rdw

      sudo tlp start
      #+end_src
    - configuration file path
      /etc/tlp.conf
    - check status
      $ tlp-stat -s
*** Slimbook Battery
    https://itlearningcenter.tistory.com/entry/%E3%80%90Ubuntu-2004-LTS%E3%80%91%EB%85%B8%ED%8A%B8%EB%B6%81-%EC%A0%84%EC%9B%90-%EA%B4%80%EB%A6%AC-%EB%8F%84%EA%B5%AC-%EC%84%A4%EC%B9%98
    "Slimbook Battery" is tlp-based GUI tool

    - install
      #+begin_src bash
      sudo add-apt-repository ppa:slimbook/slimbook
      sudo apt-get update
      sudo apt-get install slimbookbattery
      #+end_src
      - bug fix: <ModuleNotFoundError: No module named 'gi'>
        $ conda install -c conda-forge pygobject
    - run "Slimbook Battery" application
    - enable the option "Autostart application"
    - modify screen brightness for Saving/Balanced/Maximum modes
** swap CapsLock with Ctrl
   [[file:emacs.org.txt::*Keyboard configuration with XKBOPTIONS][Keyboard configuration with XKBOPTIONS]]
** ibus korean keyboard setting
   https://pstudio411.tistory.com/entry/Ubuntu-2004-%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5-%EB%B0%A9%EB%B2%95
   remove "Korean" from "Installed Languages" and reinstall it
   if "Hangul" cannot be added to ibus's Input Method
** fcitx korean settting
   https://velog.io/@yujo/Ubuntu-20.04%ED%95%9C%EA%B8%80-%EC%9E%85%EB%A0%A5%EA%B8%B0-%EC%84%A4%EC%B9%98-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0
   - install
     $ sudo apt-get update
     $ sudo apt-get install fcitx-hangul
   - "Setting" -> "Region & Language" -> "Manage installed Languages"
      -> "Keyboard input method system" -> "fcitx"
   - reboot
*** disable fcitx shortcuts
    https://askubuntu.com/a/884288
    - edit "/usr/share/fcitx/addon/fcitx-vk.conf"
    - add "Enable=False"
*** fcitx config
    $ fcitx-configtool
*** set default language
    - open config
      $ fcitx-configtool
    - Global Config
    - Show Advanced Options (at the left bottom corner)
    - Program
    - Default Input Method State -> Active
** error fix for typing korean in gnome
   https://github.com/fcitx/fcitx-hangul/issues/4#issuecomment-282241511
   #+begin_src sh
   gsettings set org.gnome.settings-daemon.plugins.keyboard active false
   #+end_src
** shortcuts change
   Settings -> Keyboard Shortcuts
   - Alt+Space -> Disabled (needed to be disabled for emacs)
   - Alt+Tab -> "Switch windows directly"

* Initial Development setup
  You can refer configuration files in "~/record/config-scripts/"
  1. Clone the record repository
     #+begin_src bash
     cd ~
     git clone https://github.com/daehwannam/record.git
     #+end_src
  2. Install conda: [[file:conda.org.txt::*Install conda][Install conda]]
     - make the default environment
  3. Install emacs via conda
     $ conda install -c conda-forge emacs
  4. Emacs config setup
     - Clone emacs-config
       #+begin_src bash
       cd ~
       git clone https://github.com/daehwannam/emacs-config.git
       if [ -d ~/.emacs.d ]; then
           echo '~/.emacs.d exists already'
       else
           mv emacs-config ~/.emacs.d
       fi
       #+end_src
     - Update "~/.emacs.d/config/options.txt"
       e.g. (machine-id eglot-setup miniconda-env python-setup programming basic)
            (machine-id min-elpy-setup miniconda-env programming basic)
            (machine-id elpy-setup miniconda-env programming basic)
            (machine-id lsp-mode min-elpy-setup miniconda-env programming basic)
     - (Optional) Install eglot: [[file:eglot.org::*Setup][Setup]]
     - (Optional) Install elpy: [[file:elpy.org.txt::*Setup][Setup]]
  5. Install tmux via conda
     - copy ~/.tmux.conf from "~/record/config-scripts/.tmux.conf"
       $ cp ~/record/config-scripts/.tmux.conf ~/.tmux.conf
     - (Optional) install logging plugin: [[file:tmux.org.txt::*logging][logging]]
  6. Install screen via conda
     - copy ~/.screenrc from "~/record/config-scripts/.screenrc"
       $ cp ~/record/config-scripts/.screenrc ~/.screenrc
  7. (Optional) Install the latest nvidia driver: [[*NVIDIA Driver][NVIDIA Driver]]
  8. (Optional) Install cudatoolkit & cudnn: [[*install guides][install guides]]
     1) CUDA driver: [[*manual install][manual install]]
     2) CUDA toolkit
        - Download: [[*download][download]]
        - Install: [[*install toolkit only, without extraction (recommended)][install toolkit only, without extraction (recommended)]]
     3) cuDNN: [[*cuDNN install][cuDNN install]]
     4) path setup: [[*Multiple CUDAs (CUDA toolkits)][Multiple CUDAs (CUDA toolkits)]]
  9. (Optional) Install others via conda
     - git
     - ...

* Bash
** make empty file
   $ touch file.txt

** Queuing processes
   https://superuser.com/a/462673
   $ command1 &
   $ wait; command2-1 && command2-2 &
   $ wait; command3 &
   $ ...

** run if previous command succeed
   https://unix.stackexchange.com/a/22727
   $ previous_command
   $ if [ $? -eq 0 ]; then
   $     next_command
   $ fi

** check if a file exists
   https://stackoverflow.com/a/638980
   $ if [ ! -f /tmp/foo.txt ]; then
   $     echo "File not found!"
   $ fi

** array
   https://opensource.com/article/18/5/you-dont-know-bash-intro-bash-arrays

** command line arguments
   https://tecadmin.net/tutorial/bash-scripting/bash-command-arguments/

** arguments to array
   https://stackoverflow.com/a/12711853
   $ myArray=("$@")

** adding custom commands
   https://unix.stackexchange.com/a/84694
   - make a directory that contains command scripts or executables
     $ mkdir ~/command
   - update ~/.bashrc
     $ export PATH="$HOME/command:$PATH"

     In this case, commands in "$HOME/command" have higher priorities.
     If you want them to have lower priorities:

     $ export PATH="$PATH:$HOME/command"

** keep running a process although its terminals is closed
   https://unix.stackexchange.com/a/4006

   #+begin_src sh
   emacs &
   disown
   #+end_src
   or
   #+begin_src sh
   emacs & disown
   #+end_src

   if you want terminal as soon as the program starts,
   #+begin_src sh
   emacs & disown && exit
   #+end_src

** editing with emacs
   This option is useful when a program (e.g. git) rerquires external editor to modify text
*** EDITOR vs. VISUAL
    https://unix.stackexchange.com/a/4861
*** EDITOR variable
    https://unix.stackexchange.com/a/502691
    $ EDITOR=emacs virsh edit win10
    $ EDITOR=emacsclient virsh edit win10
    $ EDITOR="emacs -nw" virsh edit win10

    You can also export the default editor in ~/.bashrc
    $ export EDITOR=emacs
    $ export EDITOR=emacsclient
    $ export EDITOR="emacs -nw"
*** VISUAL variable
    https://stackoverflow.com/a/116570

    - GUI version
      #+begin_src sh
      emacs --daemon  # M-x server-start
      emacsclient
      VISUAL=emacsclient virsh edit win10
      export VISUAL=emacsclient
      #+end_src

    - Terminal version
      #+begin_src sh
      emacs --daemon  # M-x server-start
      emacsclient -t
      VISUAL=emacsclient virsh edit win10  # don't add [-t] option
      export VISUAL=emacsclient
      #+end_src

** wait until all background jobs are finished
   https://stackoverflow.com/a/1131511

   use "wait $(jobs -rp)"

   - jobs options
     https://www.cyberciti.biz/faq/unix-linux-jobs-command-examples-usage-syntax/
     -r : display only running jobs
     -p : display only PIDs

   e.g. waiting until 3 jobs are finished
   #+begin_src bash
   sleep 7 && echo "done 1st" &
   sleep 2 && echo "done 2nd" &
   sleep 3 && echo "done 3rd" &

   wait $(jobs -rp)
   echo "after wait"
   #+end_src

** check if command is installed
   https://stackoverflow.com/a/677212

   $ command -v <the_command>

   e.g. install autoconf unless it exists
   #+begin_src sh
   if ! command -v autoconf &> /dev/null
   then
       # install autoconf first, if it's not installed
       conda install -c conda-forge autoconf
   fi
   #+end_src

** .bashrc vs. profile
   https://serverfault.com/a/500071
   - .profile should also be loaded when starting a graphical desktop session.
   - .profile is executed in login shell
     https://unix.stackexchange.com/a/29811
     $ su -l <id>
     "su <id>" doesn't execute .profile

** check if command is failed or not
   #+begin_src bash
   # https://unix.stackexchange.com/a/22728
   if some-command ; then
       echo "Command succeeded"
   else
       echo "Command failed"
   fi
   #+end_src

   e.g.
   #+begin_src bash
   # https://unix.stackexchange.com/a/22728
   if cd some-directory ; then
       echo "Success to change the current directory"
   else
       echo "Fail to change the current directory"
   fi
   #+end_src

* Configuration of ~/.bashrc
  #+begin_src bash
  # added by Anaconda3 4.4.0 installer
  # export PATH="/home/dhnam/bin/anaconda3/bin:$PATH"
  # source activate default  # after installing "conda create -n default python=3 anaconda"
  # alias emacs='emacs25'  # alias emacs='emacs24'

  # CUDA path config
  export PATH=/usr/local/cuda-10.1/bin:$PATH
  export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH

  # >>> conda initialize >>>
  # !! Contents within this block are managed by 'conda init' !!
  __conda_setup="$('/home/dhnam/program/anaconda3/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
  if [ $? -eq 0 ]; then
      eval "$__conda_setup"
  else
      if [ -f "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh" ]; then
          . "/home/dhnam/program/anaconda3/etc/profile.d/conda.sh"
      else
          export PATH="/home/dhnam/program/anaconda3/bin:$PATH"
      fi
  fi
  unset __conda_setup
  # <<< conda initialize <<<

  export PATH="/home/dhnam/program/anaconda3/envs/default/bin:$PATH"
  source activate default  # after installing "conda create -n default python=3 anaconda"
  #+end_src

  #+RESULTS:

* General Linux
** init.d vs. systemd
   https://uace.github.io/learning/init-vs-systemd-what-is-an-init-daemon

   |                   | init.d      | systemd             |
   |-------------------+-------------+---------------------|
   | service directory | /etc/init.d | /etc/systemd/system |
   | command           | service     | systemctl           |
   | parallelism       | no          | yes                 |
** startup execution for daemons
   https://www.baeldung.com/linux/run-script-on-startup
** startup script
*** crontab
    https://stackoverflow.com/a/46924468

    - enter cron
      $ EDITOR=emacsclient crontab -e
    - add the following line
      #+begin_example
      @reboot sh /absolute/path/to/the/script
      #+end_example
** change partition mount
   https://askubuntu.com/a/45618

   - check partitions
     $ sudo blkid
   - modify "/etc/fstab"
     - e.g. mount partition to an user's folder and change ownership:
       #+begin_example
       UUID=C6289E13289E029B /home/dhnam/ntfsdata ntfs defaults,umask=007,uid=1000,gid=1000 0 0
       #+end_example
       where
       - uid and gid can be obtained by:
         $ id
       - umask=007 make its permission as "drwxrwx---"
     - if the mounted partition is gonna be shared via sshfs, set "umask=000"
       e.g.
       #+begin_example
       UUID=C6289E13289E029B /home/dhnam/ntfsdata ntfs defaults,umask=000,uid=1000,gid=1000 0 0
       #+end_example
   - reboot
** get gid from group name
   https://askubuntu.com/a/639998
   $ cut -d: -f3 < <(getent group $GROUP_NAME)
** check if X server is running or not
   #+begin_src sh
   if ! timeout 1s xset q &>/dev/null; then
       echo "No X server at \$DISPLAY [$DISPLAY]" >&2
       exit 1
   fi
   #+end_src

* Ubuntu
** .Trash location
   https://askubuntu.com/questions/102099/where-is-the-trash-folder
   /home/$USER/.local/share/Trash
   or
   /home/$USER/.local/share/Trash/files/
** Upgrade ubuntu version
   type "do-release-upgrade" in shell
   - apt-get update & upgrade may procede
** apt-get
*** install latested package
    https://askubuntu.com/a/303547

    'apt-get update' updates the package lists from repositories
    $ apt-get update
    $ apt-get install <package-name>
*** update vs upgrade
    You should first run update, then upgrade. Neither of them automatically runs the other.
    https://askubuntu.com/a/94104
** apt-cache
*** find package by name
    https://askubuntu.com/questions/32238/find-package-name-using-terminal
    $ apt-cache search <name>
    the most relevant results will be at the last since it is the terminal
** dpkg
*** package install location
    https://askubuntu.com/a/408785
    dpkg -L <packagename>
*** package version
    https://unix.stackexchange.com/a/89590
    $ dpkg -s <package> | grep Version
*** install .deb package
    https://askubuntu.com/a/40781
    $ sudo dpkg -i DEB_PACKAGE
*** remove package
    https://askubuntu.com/a/22204
    - remove package
      $ sudo dpkg -r package_name

    - removing package and configuration files together
      $ sudo dpkg --purge package_name
** Creating a new user
   $ sudo adduser username
** Add a sudo user to sudo group
   $ sudo usermod -aG sudo username  # for Ubuntu
   $ usermod -aG wheel username  # for Red Hat
** Login as another user
   https://askubuntu.com/questions/222984/can-i-log-in-with-other-users-account
   - $ su username
   - $ login username
   - $ sudo -u username
** unicode output setting
   https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode

   in ~/.basrc:

   # unicode output setting
   # https://emacs.stackexchange.com/questions/10223/how-to-display-unicode-utf-8-as-unicode
   $ LANG=en_EN.UTF8
   $ export LC_ALL=en_US.UTF-8
   $ export LANG=en_US.UTF-8
   $ export LANGUAGE=en_US.UTF-8
** Change hostname
   https://www.cyberciti.biz/faq/ubuntu-change-hostname-command/
   1. Type the following command to edit /etc/hostname using nano or vi text editor:
      $ sudo nano /etc/hostname
      Delete the old name and setup new name.
   2. Next Edit the /etc/hosts file:
      $ sudo nano /etc/hosts
      Replace any occurrence of the existing computer name with your new one.
   3. Re-login or reboot the system to changes take effect:
      $ sudo reboot
** Ubuntu version
   https://askubuntu.com/questions/686239/how-do-i-check-the-version-of-ubuntu-i-am-running
   $ lsb_release -a
** Network
*** MAC address
    $ cat /sys/class/net/enp1s0/address
*** Wifi WPA2/PEAP conneciton
    Check "No CA certificate is required"
** ModuleNotFoundError: No module named 'distro'
   https://stackoverflow.com/a/62635184
   $ pip install distro
** Terminal
*** Change terminal color
    https://www.linuxfordevices.com/tutorials/ubuntu/change-ubuntu-terminal-color
    1. make new profile
       Colors -> Palette -> XTerm (or other schemes)
    2. apply the profile
       - use "Set as default" for newly created terminals
       - or mouse right click -> Profiles -> select your profile
*** copy/paste text from/to terminal
    - Copy: Ctrl+Shift+c (or drag region with mouse)
    - Paste: Ctrl+Shift+v (or Shift+<insert>)
** Workspace
*** config in Ubuntu 20.04
    - setup
      $ sudo apt install gnome-tweaks
    - run
      $ gnome-tweaks
    - config for multiple monitors
      https://askubuntu.com/questions/1059479/dual-monitor-workspaces-in-ubuntu-18-04
      - open gnome-tweaks
        $ gnome-tweaks
      - "Workspaces" -> "Display Handling" -> "Workspaces span displays"
**** bindings
     - overview
       <super>
     - switch
       - Ctrl-Alt-<arrow>  ; <arrow> is one of <up>, <down>, <left> and <right>
     - switching with moving the current window
       - Ctrl-Alt-Shift-<arrow>
** Add program to application
   https://askubuntu.com/a/141247

   make a file named ~/.local/share/applications/${your_app}.desktop
   #+begin_src sh
   [Desktop Entry]
   Type=Application
   Terminal=false  # or true when the program output into terminal
   Name="Your Application Name"
   Icon=/path/to/icon/icon.svg
   Exec=/path/to/file/program
   #+end_src
   The "Name" of application should be different with others
*** location of desktop entries
    - ~/.local/share/applications
    - /usr/share/applications
    - /usr/local/share/applications
*** Run ~/.bashrc initially
    https://askubuntu.com/a/498718

    run the program with -c option
    #+begin_src sh
    Exec=bash -ic "emacs"
    #+end_src
** Change default applications
   https://help.ubuntu.com/stable/ubuntu-help/net-default-browser.html.en
   Settings -> Default Applications
** Show installed packages
   https://askubuntu.com/a/17829

   The command print all installed package whose name contain "libwebkit2gtk"
   $ apt list --installed | grep libwebkit2gtk
** Enable touch pad
   https://askubuntu.com/a/624929
   https://askubuntu.com/a/1308399/820403

   - show names and IDs of devices
     $ xinput list
   - enable touch pad
     $ xinput set-prop <ID of touchpat> "Device Enabled" 1
   - eanble touch pad's tap-to-click
     $ xinput set-prop "Name of touchpad" "libinput Tapping Enabled" 1
** start GUI session in virtual console
   https://askubuntu.com/a/562808

   - type Ctrl + Alt + F3        (or other function key)
   - run command in virtual console
     $ startx -- :3              (3 is the function key number)

   starting EXWM from virtual console would not work
   if there's already EXWM running.
** boot in virtual console
   https://askubuntu.com/a/859637

   - update "/etc/default/grub"
     #+begin_src sh
     GRUB_CMDLINE_LINUX_DEFAULT="text"
     GRUB_TERMINAL=console
     #+end_src
   - run the commands below
     #+begin_src sh
     sudo update-grub
     sudo systemctl enable multi-user.target --force
     sudo systemctl set-default multi-user.target
     #+end_src
   - undoing text-mode
     #+begin_src sh
     sudo systemctl enable graphical.target --force
     sudo systemctl set-default graphical.target
     #+end_src
** change font size of virtual console
   https://unix.stackexchange.com/a/77050
   - update "/etc/default/console-setup"
     #+begin_example
     FONTSIZE="8x16"
     #+end_example
     8x16 is the maximum size
   - restart service
     $ sudo service console-setup restart
** keyboard layout changes
   https://tolovefeels.tistory.com/58

   - update "/etc/default/keyboard"
     #+begin_example
     XKBVARIANT="kr(kr104)
     #+end_example
   - Reconfigure
     $ sudo dpkg-reconfigure keyboard-configuration
** disable sleep / suspend / hibernate
   https://askubuntu.com/questions/473037/how-to-permanently-disable-sleep-suspend
   $ sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target
** Ubuntu auto-log out disable
   https://linuxconfig.org/disable-turn-off-lock-screen-on-ubuntu-20-04-focal-fossa-linux
   "Settings" -> "Privacy" -> "Screen Lock" -> disable "Automatic Screen Lock"
** fix screen brightness 1
   https://www.youtube.com/watch?v=WeMuvjgM2U0
   - open "/etc/default/grub"
   - add "GRUB_CMDLINE_LINUX_DEFAULT" options "pcie_aspm=force acpi_backlight_native"
     e.g.
     #+begin_src sh
     GRUB_CMDLINE_LINUX_DEFAULT="quiet splash pcie_aspm=force acpi_backlight_native"
     #+end_src
** fix screen brightness 2
   https://www.youtube.com/watch?v=PQqvKnalipM
   https://www.bobjohnson.com/blog/adventures-with-linux-installing-ubuntu-on-a-panasonic-toughbook-cf31/
** change printer protocol
   https://askubuntu.com/a/1267529
   - stop cups
     $ sudo systemctl stop cups
   - change a printer's DeviceURI from "/etc/cups/printers.conf"
     e.g.
     #+begin_example
     DeviceURI lpd://141.223.91.249:9100  # lpb is used for LDP/LPR protocold
     #+end_example
   - restart cups
     $ sudo systemctl restart cups
** running gnome-control-center's category in command line
   https://askubuntu.com/a/121606
   $ gnome-control-center sound
*** rollback
    $ sudo systemctl set-default graphical.target
** Enable dock bar
   https://askubuntu.com/a/1186456
   - method 1
     - run the following command
       $ gnome-shell-extension-prefs
     - change "Ubuntu Dock" as "ON"
       - if extensions are inactivated, enable it by clicking the button at the top right corner
   - method 2
     - run gnome-tweaks
       $ gnome-tweaks
     - Extensions -> change "Ubuntu dock" as "ON"
       - if extensions are inactivated, enable it by clicking the button at the top right corner
*** change dock bar config
    https://linuxconfig.org/how-to-customize-dock-panel-on-ubuntu-20-04-focal-fossa-linux
    if you cannot find Settings -> Appearance, you can try below method
    - install dconf-editor
      $ sudo apt install dconf-editor
    - run dconf-editor
      $ dconf-editor
    - find "/org/gnome/shell/extensions/dash-to-dock/dock-position"
    - change "Custom value"
** running .desktop file from command line
   if "some-app.desktop" is located in one of
   - /usr/share/applications
   # - /usr/local/share/applications
   - ~/.local/share/applications

   $ gtk-launch app
   or
   $ gtk-launch app.desktop
** change default application
   https://askubuntu.com/questions/1030281/change-default-applications-from-script
   https://askubuntu.com/a/251738

   update "~/.config/mimeapps.list"
** enable desktop icons
   - open gnome-tweaks
     $ gnome-tweaks
   - "Extensions" -> "Desktop icons"
** install recomended drivers
   https://pstudio411.tistory.com/entry/Ubuntu-2004-Nvidia%EB%93%9C%EB%9D%BC%EC%9D%B4%EB%B2%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0
   drivers such as nvidia-driver are installed
   $ sudo ubuntu-drivers autoinstall

* Other distributions
** Arch linux
*** rolling release
    https://frameboxxindore.com/windows/is-arch-linux-a-rolling-release.html
    Arch Linux uses a rolling release model, meaning there are no “major releases” of completely new versions of the system; a regular system update is all that is needed to obtain the latest Arch software; the installation images released every month by the Arch team are simply up-to-date snapshots of the main system

    A Linux rolling release distribution is continuously updated in all areas of the operating system, including the Linux kernel, the desktop environment, all utilities and all applications. Getting the latest development, hardware support and new features much sooner with a rolling release.

* Utilities
** ssh
*** install ssh server
    $ sudo apt install openssh-server
*** SSH multiple port setup
    - update "/etc/ssh/sshd_config"
      #+begin_example
      Port 22
      Port 61112
      #+end_example
    - then type as follow:
      $ sudo service ssh restart
*** restrict port to a specific user
    https://serverfault.com/questions/247291/forced-per-user-ssh-port
    - update "/etc/ssh/sshd_config"
      #+begin_example
      ListenAddress 0:61112
      AllowUsers someuser
      #+end_example
    - then type as follow:
      $ sudo service ssh restart
*** initialize known hosts
    https://superuser.com/a/159510
    remove "~/.ssh/known_hosts"
*** using x11 forwarding from linux
    https://askubuntu.com/a/436751/820403
    $ ssh -X remote_login@192.168.1.12
*** making firewall allow ssh port
    https://www.cyberciti.biz/faq/ufw-allow-incoming-ssh-connections-from-a-specific-ip-address-subnet-on-ubuntu-debian/
    $ sudo ufw allow 61112/tcp
    where 61112 is the port number
*** jump to a server via intermediate hops
    https://wiki.gentoo.org/wiki/SSH_jump_host
    ssh -J user1@host1:port1,user2@host2:port2 user3@host3 -p port3
    e.g.
    #+begin_src sh
    ssh -J user1@host1:61111 user2@host2
    ssh -J user1@host1:61111 user2@host2 -p 22
    ssh -J user1@host1:61111,user2@host2:61112 user3@host3 -p 61113
    #+end_src

** ls
*** Explanation for "ls -l"
   - drwxrwxrwx
     - d : "d"->directory / "-"->file / "l"->link
     - r : read permission
     - w : write permission
     - x : execution permission
     - 1st rwx : owner permission
     - 2nd rwx : group permission
     - 3rd rwx : other permission

   - Permission change examples:
     $ chmod 755 file-name
     $ chmod 711 file-name
     $ chmod 777 file-name

** scp example
   - with port number
     $ scp -P 60001 user@domain.name.com:/home/user/some_file ./copied_file
     - '-P' indicate port number
     - directory cannot be copied
   - copy recursively
     scp -r ./source_directory user@domain.name.com:/home/user/some_directory/
     scp -r ./source_directory user@domain.name.com:/home/user/some_directory/target_directory
   - verbose option -v
     scp -v -P 60001 user@domain.name.com:/home/user/some_file ./copied_file

** ps
   - list all options
     $ ps --help all
   - show processes made by a user
     $ ps -u user_name
     $ ps -fu dhnam  # with full-format
   - show all processes(-e) with full-format(-f)
     $ ps -ef
   - show all users with processes
     $ ps -ef | awk 'NR>1 {print $1}' | sort -u

     note:
     - NR>1 : skip the first row
     - {print $1} : print the first field

** alias
   ex)
   $ alias emacs=emacs25
   $ alias emacsclient=emacsclient25
   $ alias ll='ls -A'

   if you write alias in ~/.bashrc, you have to update it by:
   $ source ~/.bashrc
** ln
*** making symbolic link
    $ ln -s /path/to/file /path/to/link

** simple commands
   - <ls -lh> to see the detail sizes of files

** df
   show files with human-readable format
   df -h

** du
   - show directory size
     $ sudo du -sh /path/to/dir

   - show files' sizes in the directory
     $ du -sh /path/to/dir/*

     e.g. show each user's directory size
     $ du -sh /home/*

   - show all files' sizes in the current directory
     $ du -hs .[^.]*

** find
*** options
    -o: or
    -name: file name
    -type: whether file is directory(d) or regular files(f) or files of other types
           (regular files don't include directories)
    -exec: run command with the found files as arguments which is represented as {}
           https://unix.stackexchange.com/a/12904
    -delete: remove found files
    -print: print the found files (default action)
*** remove found files
    https://stackoverflow.com/a/41386937
    $ find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
*** change permissions of found files
    https://unix.stackexchange.com/a/39133

    e.g. change permissions of files whose names start with .#
    $ find . -type f -name '.#*' -exec chmod +w {} \;
*** parenthesis
    parenthesis group target files then you can apply them with the same action

    e.g. take delete action for all found files
    #+begin_src bash
    find . -type f \( -name '*.aux' -o -name '*.bbl' -o
    -name '*.blg' -o -name '*.spl' -o -name '*.log' -o -name '*.pdf' \) -delete
    #+end_src

** grep
** pdfgrep
   e.g.
   - command
     #+begin_src sh
     pdfgrep -H -n -i 'encode [^.]* as' some/path/to/dir/*
     #+end_src
     the text between 'encode' and 'as' doesn't include '.' character.
   - output
     #+begin_example
     pdf/DBLP=conf+acl+GoldwasserRCR11.pdf:6:encode a first-order decision as αcs , a binary variP ROPORTION Words-predicate prop (Sec. 3.2)
     pdf/DBLP=conf+acl+GoldwasserRCR11.pdf:6:and encode these restrictions as global constraints analyze their properties. Tab. 1 defines the naming
     #+end_example
** xargs
   xargs sends the standard input as arguments of another command

   e.g.
   $ find . -name '*.aux' -o '*.log' | xargs rm -f

** chmod
   https://en.wikipedia.org/wiki/Chmod

   - change to an executable for the user(owner)
     $ chmod u+x ./path/to/file
   - change to an executable for all the users (recommended)
     $ chmod a+x ./path/to/file
   - you may need shebang(#!) at the top line to indicate a program to run the script
     e.g. #!/bin/bash
     e.g. #!/home/user/program/miniconda3/envs/default/bin/python
     CAUTION: no space is needed between shebang and the program path

** wget
*** download a file to a specific directory
    https://www.tecmint.com/wget-download-file-to-specific-directory/
    wget https://some-site.com/some-file.txt -P /some/path/to/dir

** lscpu
   show cpu information
   $ lscpu

** free
   show memory usage
   $ free -h

** date
   - changing current time manually (sudo is required)
     https://www.sharedit.co.kr/posts/2504

     the format is "월일시간년도.초"

     e.g.
     $ date 031211572018.00
     ==> Mon Mar 12 11:57:00 KST 2018
     $ date
     ==> Mon Mar 12 11:57:02 KST 2018

** mkdir
   - mkdir "all directories in the path" when "directories don't exist"
     $ mkdir -p some/path/to/a/directory

** xdg-open
   This is a command for GUI.
   xdg-open - opens a file or URL in the user's preferred application

   e.g.
   $ xdg-open "example.pdf"
*** change default applications of xdg-open
    https://unix.stackexchange.com/a/59088
    https://stackoverflow.com/a/67185532

    - you first need .desktop files such as ~/.local/share/applications/${your_app}.desktop
    - change applications by commands
      #+begin_src sh
      # pdf
      # https://unix.stackexchange.com/a/59088
      # xdg-mime default emacsclient-alternate.desktop application/pdf
      xdg-mime default org.kde.okular.desktop application/pdf
      # xdg-mime default org.gnome.Evince.desktop application/pdf

      # web browser
      # https://stackoverflow.com/a/67185532
      xdg-mime default qutebrowser.desktop x-scheme-handler/https
      xdg-mime default qutebrowser.desktop x-scheme-handler/http
      xdg-mime default qutebrowser.desktop text/html
      xdg-mime default qutebrowser.desktop application/xhtml+xml
      # or firefox.desktop or nyxt.desktop
      #+end_src
    - or you can directly change "~/.config/mimeapps.list"
** pskill
   https://stackoverflow.com/a/27820938
   $ pkill -f python
** killall
   https://www.linkedin.com/pulse/use-killall-kill-commands-stop-processes-linux-kuldeep-saxena
   $ killall gnome-control-center
** lsblk
   https://unix.stackexchange.com/a/227458
   Check whether a mounted device, such as sda or sdb, is SDD or HDD:
   $ lsblk -d -o name,rota

   The example output is:
       NAME ROTA
       sda     0
       sdb     0
       sdc     1
   where 1 is HDD(rotational device) and 0 is SDD.
** chown &* chgrp
   Basic usage
   $ chown user some/file/or/directory
   $ chgrp user some/file/or/directory

   Change owner and group of multiple files recursively
   https://superuser.com/a/260939
   $ chown -R user:group file1 file2
** shutdown
   - scheduled shutdown
     https://askubuntu.com/questions/505929/shutdown-after-a-certain-time
     $ date  # to check the current time
     $ sudo shutdown -P 8:30
   - cancel scheduled shutdown
     $ sudo shutdown -c
** suspend & hibernate
   - suspend
     https://www.cyberciti.biz/faq/linux-command-to-suspend-hibernate-laptop-netbook-pc/
     $ systemctl suspend
   - hibernate
     $ systemctl hibernate
** zip & unzip
*** zip
    - compress a directory
      $ zip -r compressed.zip path/to/dir
    - compress multiple directories
      $ zip -r compressed.zip path/to/dir1 path/to/dir2 path/to/dir3
    - add a file to the existing .zip file
      $ zip compressed.zip path/to/file
    - zip silently (-q option)
      $ zip -rq compressed.zip path/to/dir
*** unzip
    - list files in .zip file
      $ unzip -l compressed.zip
    - uncompressing .zip file
      $ unzip compressed.zip
    - uncompressing .zip file to a specific directory
      $ unzip compressed.zip -d path/to/dir
** terminal spreadsheets
   https://www.reddit.com/r/emacs/comments/kxinju/org_tables_for_big_spreadsheets/
   - emacs SES
   - emacs org-mode table
   - visidata
   - python pandas + org-mode
** xkill
   https://koreaubuntu.wordpress.com/2009/08/19/%EC%9A%B0%EB%B6%84%ED%88%AC%EC%9D%98-ctrlaltdel%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/
   In GUI, you can kill a program by clicking its window after running 'xkill'
   $ xkill
** make
*** make process
    https://thoughtbot.com/blog/the-magic-behind-configure-make-make-install
    #+begin_src sh
    ./configure
    make
    make install
    #+end_src
** nohup
   https://joonyon.tistory.com/98
   https://unix.stackexchange.com/a/45915
   https://stackoverflow.com/a/10408906

   nohup = no hang up

   - nohup in background
     $ nohup command &
   - redirect stdout(1>) and stderr(2>)
     $ nohup command 1> result.out 2> result.err &
   - redirect stdout(1>) and stderr(2>) into the same file
     $ nohup command > result.log 2>&1 &
   - without nohup.out
     $ nohup command > /dev/null 2>&1   # doesn't create nohup.out
** chroot
   change root directory
*** error of "failed to run command ‘/bin/bash’: No such file or directory"
    https://unix.stackexchange.com/a/606895
    in my case, /mnt/lib doesn't have most files
** acpi
   - install
     $ sudo apt-get install acpi
   - battery infomation
     $ acpi
** xset
   - chnage keyboard speed
     "xset r rate [delay [rate]]"
     e.g.
     $ xset r rate 250 60
** cpupower
*** current frequency governor
    $ cpupower frequency-info -p
    or
    $ cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
*** change frequency governor
    https://wiki.archlinux.org/title/CPU_frequency_scaling#Scaling_governors
    $ cpupower frequency-set -g <governor>
    e.g.
    #+begin_src sh
    sudo cpupower frequency-set -g ondemand
    sudo cpupower frequency-set -g powersave
    #+end_src

*** error of "No outputs have backlight property"
    https://askubuntu.com/a/1060843

    if you can find "intel_backlight" in "/sys/class/backlight",
    update "/etc/X11/xorg.conf" with the following content

    #+begin_example
    Section "Device"
        Identifier  "Intel Graphics"
        Driver      "intel"
        Option      "Backlight"  "intel_backlight"
    EndSection
    #+end_example

    then reboot
** startx
*** running X11 simply
    https://en.wikibooks.org/wiki/Guide_to_X11/Starting_Sessions#xinit_and_startx
    $ startx
*** run x session in another tty
    https://askubuntu.com/a/546334
    e.g.
    $ startx -display :2 -- :2 vt3 &
    where
    - :2 means display number. you can get the current display by
      $ echo $DISPLAY
    - vt3 means tty number. you can get the current tty by
      $ tty
** dmesg
   https://man7.org/linux/man-pages/man1/dmesg.1.html
   "dmesg is used to examine or control the kernel ring buffer."
   dmesg can print kernel log
** fdisk
   list disks
   $ sudo fdisk -l

   e.g. example output of a disk
   #+begin_example
   Disk /dev/sdb: 596.18 GiB, 640135028736 bytes, 1250263728 sectors
   Disk model: S2 Portable
   Units: sectors of 1 * 512 = 512 bytes
   Sector size (logical/physical): 512 bytes / 512 bytes
   I/O size (minimum/optimal): 512 bytes / 512 bytes
   Disklabel type: dos
   Disk identifier: 0x8eddc49c
   #+end_example
*** mount a listed disk
    https://www.tutorialspoint.com/how-to-mount-usb-drive-in-a-linux-system
    e.g.
    #+begin_src sh
    $ sudo mount /dev/sdb1 /mnt
    #+end_src
** lsblk
   https://www.reddit.com/r/emacs/comments/btvsk7/comment/ep3eepc/?utm_source=share&utm_medium=web2x&context=3
   lsblk lists information about block devices.
** udisksctl
   https://www.reddit.com/r/linuxquestions/comments/a2lfh3/sudo_mount_vs_udisksctl_mount/
   udisksctl is from udisks2 package
   - udisksctl doesn't require sudo privilege unlike mount/unmount command
   - udisksctl mount devices to /run/media/$USER/<automatically-created-directory>
** xte
*** toggle Caps Lock
    https://askubuntu.com/a/607915
    $ xte "key Caps_Lock"
** command
*** check a program exists
    https://stackoverflow.com/a/677212
    $ command -v pdfgrep
** pdfcrop
   remove margin of pdf
   #+begin_src sh
   pdfcrop example.pdf
   #+end_src
*** examples
    #+begin_src sh
    pdfcrop --margins 10 input.pdf output.pdf
    pdfcrop --margins '5 10 5 20' --clip input.pdf output.pdf
    #+end_src
** shopt
*** remove all directories except one
    https://stackoverflow.com/a/34057281
    #+begin_src sh
    shopt -s extglob
    cd parent
    rm -rf !(some-dir-name)
    #+end_src

* NVIDIA GPU & CUDA
** components
   https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
   1. NVIDIA Driver (ex. 390.77)
      $ nvidia-smi  # the version appears at the left upper corner
   2. CUDA toolkits or just CUDA (ex. v9.0)
      $ nvcc --version  # it may be different with the version by nvidia-smi
      $ # the version is determined after setting up CUDA toolkit's path
   3. cuDNN (ex. v7.2.1)
      $ cat /usr/local/cuda-8.0/include/cudnn.h | grep CUDNN_MAJOR -A 2
** quick start
   1. NVIDIA Driver
      install latest NVIDIA Driver by apt (latest NVIDIA Driver can cover all cuda toolkits)
   2. CUDA toolkit
      Download CUDA toolkit as '.run' file
      install CUDA toolkit only, without extraction
      $ sudo sh cuda-10.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-10.1
   3. cuDNN
      download page: https://developer.nvidia.com/rdp/cudnn-download
      - download the version of cuDNN for the corresponding version of CUDA toolkit
      https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
      1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
      2. Unzip the cuDNN package.
         $ tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz
      3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
	 $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.1/include
	 $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.1/lib64
	 $ sudo chmod a+r /usr/local/cuda-10.1/include/cudnn.h /usr/local/cuda-10.1/lib64/libcudnn*
	 The path of CUDA toolkit and cuDNN should corresponds to "/usr/local/cuda-10.1/"
   4. Update .bashrc for path information
      add following commands to ~/.bashrc
      $ export PATH=/usr/local/cuda-10.1/bin:$PATH
      $ export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH
** CUDA path
   conventionally, /usr/local/cuda-x.x is used for CUDA path.
   However, each user's local directory can be used as CUDA directory
   e.g.
     https://blog.csdn.net/weixin_41278720/article/details/81255265
     export PATH=$HOME/cuda-10.2/bin:$PATH
     export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/cuda-10.2/lib64/

** install guides
*** NVIDIA Driver
    - using GUI: software & updates
      https://eungbean.github.io/2018/08/08/Ubuntu-Installation1/
    - using apt
      https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
      $ sudo apt-get install nvidia-384 nvidia-modprobe
    - install latest nvidia drivers (in ubuntu 14.04) (it may not working)
      https://www.binarytides.com/install-nvidia-drivers-ubuntu-14-04/

      setup the xorg-edgers ppa
      $ sudo add-apt-repository ppa:xorg-edgers/ppa -y
      $ sudo apt-get update

      install a specific driver
      $ sudo apt-get install nvidia-334

      or install the latest version
      $ sudo apt-get install nvidia-current
    - install latest nvidia drivers (another way)
      http://www.linuxandubuntu.com/home/how-to-install-latest-nvidia-drivers-in-linux
      $ sudo apt-get purge nvidia*
      $ sudo add-apt-repository ppa:graphics-drivers
      $ sudo apt-get update
      $ sudo apt-get install nvidia-430
    - minimum driver version
      https://stackoverflow.com/a/30820690
**** manual install
     - download .run file from NVIDIA site
     - remove existing nvidia drivers
       $ sudo apt-get remove --purge nvidia-*
     - install the new nvidia driver
       $ sudo service lightdm stop ## if you are using 11.04 replace `lightdm` with `gdm`
       $ sudo sh NVIDIA-Linux-x86_64-285.05.09.run
     - reboot
**** Disabling nouveau kernel driver
     https://askubuntu.com/a/951892
     1. Open https://askubuntu.com/a/951892
     2. Write the following scripts:
        #+begin_src
        blacklist nouveau
        options nouveau modeset=0
        #+end_src
     3. sudo update-initramfs -u
     4. reboot

*** CUDA toolkits
    https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/

**** Check globally installed CUDAs
     $ ls -d /usr/local/cuda-*/

**** Multiple CUDAs (CUDA toolkits)
     https://kaen2891.tistory.com/24
     https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
     https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
     https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions

     add following commands to ~/.bashrc
     $ export PATH=/usr/local/cuda-8.0/bin:$PATH
     $ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

**** CUDA runfile
***** prerequisites
      - disable nouveau
	https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
      - X-server should be shutdown before installing NVIDIA driver
	https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
	stop light dm
	https://ericplayground.com/2017/09/26/how-to-stop-and-restart-an-x-server-on-ubuntu/
	$ sudo service lightdm stop
	$ sudo init 3
***** download
      https://developer.nvidia.com/cuda-toolkit-archive
***** extract NVIDIA driver, CUDA installer and CUDA samples from runfile
      https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
      $ bash ./cuda_*.run --extract=$HOME  # an absolute path

***** install all without extraction
      https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
      $ sudo sh cuda-9.1.run --silent

      other options:
      --override (https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/)

***** install toolkit only, without extraction (recommended)
      https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
      $ sudo sh cuda-9.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.1

***** all options of runfile
      $ sudo sh cuda-9.1.run --help

*** cuDNN install
    https://medium.com/repro-repo/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
    download page: https://developer.nvidia.com/rdp/cudnn-download
    - download .tgz file rather than .deb file
    - download the version of cuDNN for the corresponding version of CUDA toolkit

    https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
    1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
    2. Unzip the cuDNN package.
       $ tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
    3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
       $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.2/include
       $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.2/lib64
       $ sudo chmod a+r /usr/local/cuda-10.2/include/cudnn.h /usr/local/cuda-10.2/lib64/libcudnn*

*** Install CUDA toolkit and cuDNN via conda
    $ conda install -c anaconda cudatoolkit=10.2
    $ conda install -c nvidia nvcc_linux-64
    $ conda install -c anaconda cudnn
**** conda cudatoolkit vs nvidia cudatoolkit
     https://programmersought.com/article/60204317600/

     "cudatoolkit installed by conda install is only a subset of the
     cudatoolkit provided by NVIDIA, and usually only contains the
     runtime environment required by deep learning frameworks such as
     PyTorch and TensorFlow, that is, runtime lib, but there is no
     nvcc."

     - also, conda cudatoolkit include cudnn files such as "libcudnn.so"
**** conda nvcc_linux-64
     Conda nvcc_linux-64 package has several versions.
     However, the version is not corresponding to actual that of nvcc

     When I installed it by
     $ conda install -c nvidia nvcc_linux-64=10.0

     The installed nvcc had version 10.2
     $ which nvcc
     $ nvcc -V

** get gpu information
   - Information of 1st GPU
     https://askubuntu.com/a/604167
     $ cat /proc/driver/nvidia/gpus/0000:01:00.0/information
   - NVIDIA diver version and gpu usage
     $ nvidia-smi
   - Detailed information with nvidia-smi
     $ nvidia-smi -q  # https://askubuntu.com/questions/5417/how-to-get-the-gpu-info/929163#929163
   - CUDA version command
     $ nvcc --version

** use cuda with python
   # https://stackoverflow.com/a/34776814
   # https://stackoverflow.com/a/37901914
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES= python main.py  # no gpu
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=1 python main.py  # gpu #1
   $ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=0,2 python main.py  # gpu #0 #2

** gpustat
   - Install
     $ conda install -c conda-forge gpustat
   - Show GPU usage with users and process IDs

** monitoring GPUs of remote servers
   https://github.com/mseitzer/gpu-monitor

* error fix
** /sbin/init: No such file or directory
   /etc/init: Permission denied
   /bin/sh: 0: can't access tty; job control turned off

   https://askubuntu.com/a/906917
   https://askubuntu.com/a/906493

   you need to mount a partition where root directory exists
   $ mount -rw -o remount /dev/sda1 /mnt
   where sda1 could be replaced with other partition based on your system
** Cannot run in framebuffer mode. Please specify busIDs
*** (testing) disable framebuffer
    https://wiki.archlinux.org/title/GRUB/Tips_and_tricks#Disable_framebuffer
    edit "/etc/default/grub"
    #+begin_src sh
    GRUB_TERMINAL_OUTPUT=console
    #+end_src
    or if you wan to use text mode
    #+begin_src sh
    GRUB_GFXPAYLOAD_LINUX=text
    #+end_src
*** remove all nvidia-drivers
    this method disable to use some applications that require nvidia-drivers
    https://askubuntu.com/a/206289
    #+begin_src sh
    sudo apt-get remove --purge '^nvidia-.*'
    sudo apt-get install ubuntu-desktop
    sudo rm /etc/X11/xorg.conf
    echo 'nouveau' | sudo tee -a /etc/modules
    #+end_src
