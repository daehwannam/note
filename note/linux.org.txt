
* General Linux
** init.d vs. systemd
https://uace.github.io/learning/init-vs-systemd-what-is-an-init-daemon

|                   | init.d      | systemd             |
|-------------------+-------------+---------------------|
| service directory | /etc/init.d | /etc/systemd/system |
| command           | service     | systemctl           |
| parallelism       | no          | yes                 |
** startup execution for daemons
https://www.baeldung.com/linux/run-script-on-startup
** startup script
*** crontab
https://stackoverflow.com/a/46924468

- enter cron
  $ EDITOR=emacsclient crontab -e
- add the following line
  #+begin_example
  @reboot sh /absolute/path/to/the/script
  #+end_example
** change partition mount
https://askubuntu.com/a/45618

- check partitions
  $ sudo blkid
- modify "/etc/fstab"
  - e.g. mount partition to an user's folder and change ownership:
    #+begin_example
    UUID=C6289E13289E029B /home/dhnam/ntfsdata ntfs defaults,umask=007,uid=1000,gid=1000 0 0
    #+end_example
    where
    - uid and gid can be obtained by:
      $ id
    - umask=007 make its permission as "drwxrwx---"
  - if the mounted partition is gonna be shared via sshfs, set "umask=000"
    e.g.
    #+begin_example
    UUID=C6289E13289E029B /home/dhnam/ntfsdata ntfs defaults,umask=000,uid=1000,gid=1000 0 0
    #+end_example
- reboot
** get gid from group name
https://askubuntu.com/a/639998
$ cut -d: -f3 < <(getent group $GROUP_NAME)
** check if X server is running or not
#+begin_src sh
if ! timeout 1s xset q &>/dev/null; then
    echo "No X server at \$DISPLAY [$DISPLAY]" >&2
    exit 1
fi
#+end_src
** install program locally
*** Example: glibc
- Download file from https://ftp.gnu.org/gnu/glibc/
  #+begin_src sh
  wget https://ftp.gnu.org/gnu/glibc/glibc-2.36.tar.xz
  #+end_src
- uncompress the file
  #+begin_src sh
  tar -xf glibc-2.36.tar.xz
  #+end_src
- install
  #+begin_src sh
  mkdir glibc-build
  cd glibc-build
  ../glibc-2.36/configure --prefix=/home/${USER}/.local/bin
  make
  make install
  #+end_src
- uninstall
  #+begin_src sh
  make uninstall  # make file may not have this option
  #+end_src

* Utilities
** ssh
*** install ssh server
$ sudo apt install openssh-server
*** SSH multiple port setup
- update "/etc/ssh/sshd_config"
  #+begin_example
  Port 22
  Port 61112
  #+end_example
- then type as follow:
  $ sudo service ssh restart
*** restrict port to a specific user
https://serverfault.com/questions/247291/forced-per-user-ssh-port
- update "/etc/ssh/sshd_config"
  #+begin_example
  ListenAddress 0:61112
  AllowUsers someuser
  #+end_example
- then type as follow:
  $ sudo service ssh restart
*** initialize known hosts
https://superuser.com/a/159510
remove "~/.ssh/known_hosts"
*** using x11 forwarding from linux
https://askubuntu.com/a/436751/820403
$ ssh -X remote_login@192.168.1.12

In "/etc/ssh/sshd_config" of the server, "X11Forwarding" should be enabled
#+begin_example
X11Forwarding yes
#+end_example

**** X11 forwarding request failed on channel 0
https://stackoverflow.com/a/49572001
1. Modify "/etc/ssh/sshd_config" as
   #+begin_example
   X11UseLocalhost no
   #+end_example
2. restart ssh daemon
   #+begin_src sh
   sudo service sshd restart
   #+end_src
*** making firewall allow ssh port
https://www.cyberciti.biz/faq/ufw-allow-incoming-ssh-connections-from-a-specific-ip-address-subnet-on-ubuntu-debian/
$ sudo ufw allow 61112/tcp
where 61112 is the port number
*** jump to a server via intermediate hops
https://wiki.gentoo.org/wiki/SSH_jump_host
ssh -J user1@host1:port1,user2@host2:port2 user3@host3 -p port3
e.g.
#+begin_src sh
ssh -J user1@host1:61111 user2@host2
ssh -J user1@host1:61111 user2@host2 -p 22
ssh -J user1@host1:61111,user2@host2:61112 user3@host3 -p 61113
#+end_src
*** Port/socket forwarding
"-L" option specifies that connections to the given TCP port or Unix socket on the local (client) host are
to be forwarded to the given host and port, or Unix socket, on the remote side.

- forwarding local machine's port to remote host's port
  #+begin_src sh
  ssh user@address -L port:host:hostport
  #+end_src

**** Exapmle: port forwarding for xpra
https://www.youtube.com/watch?v=Ukqs5M5Fthg
- Access a server and enable port forwarding via ssh
  #+begin_src sh
  # ssh user@address -L port:host:hostpo
  ssh user@address -L 8000:localhost:9000
  #+end_src
  Now, client's port "8000" is forwarded to the remote server's "localhost:9000"
- Run xpra in the server side
  #+begin_src sh
  # xpra start --bind-tcp=0.0.0.0:9000 -html=on --start-child=xterm
  xpra start --bind-tcp=0.0.0.0:9000 --html=on --start-child=kitty
  #+end_src
- Access the xpra server via browser
  #+begin_src sh
  firefox localhost:8000
  #+end_src
** ls
*** Explanation for "ls -l"
- drwxrwxrwx
 - d : "d"->directory / "-"->file / "l"->link
 - r : read permission
 - w : write permission
 - x : execution permission
 - 1st rwx : owner permission
 - 2nd rwx : group permission
 - 3rd rwx : other permission

- Permission change examples:
 $ chmod 755 file-name
 $ chmod 711 file-name
 $ chmod 777 file-name

** scp example
- with port number
  $ scp -P 60001 user@domain.name.com:/home/user/some_file ./copied_file
  - '-P' indicate port number
  - directory cannot be copied
- copy recursively
  scp -r ./source_directory user@domain.name.com:/home/user/some_directory/
  scp -r ./source_directory user@domain.name.com:/home/user/some_directory/target_directory
- verbose option -v
  scp -v -P 60001 user@domain.name.com:/home/user/some_file ./copied_file

** ps
- list all options
  $ ps --help all
- show processes made by a user
  $ ps -u user_name
  $ ps -fu dhnam  # with full-format
- show all processes(-e) with full-format(-f)
  $ ps -ef
- show all users with processes
  $ ps -ef | awk 'NR>1 {print $1}' | sort -u

  note:
  - NR>1 : skip the first row
  - {print $1} : print the first field

** alias
ex)
$ alias emacs=emacs25
$ alias emacsclient=emacsclient25
$ alias ll='ls -A'

if you write alias in ~/.bashrc, you have to update it by:
$ source ~/.bashrc
** ln
*** making symbolic link
$ ln -s /path/to/file /path/to/link

** simple commands
- <ls -lh> to see the detail sizes of files

** df
show files with human-readable format
df -h

** du
- show directory size
  $ sudo du -sh /path/to/dir

- show files' sizes in the directory
  $ du -sh /path/to/dir/*

  e.g. show each user's directory size
  $ du -sh /home/*

- show all files' sizes in the current directory
  $ du -hs .[^.]*

** find
*** options
-o: or
-name: file name
-type: whether file is directory(d) or regular files(f) or files of other types
       (regular files don't include directories)
-exec: run command with the found files as arguments which is represented as {}
       https://unix.stackexchange.com/a/12904
-delete: remove found files
-print: print the found files (default action)
*** remove found files
https://stackoverflow.com/a/41386937
$ find . -type f -name '*.py[co]' -delete -o -type d -name __pycache__ -delete
*** change permissions of found files
https://unix.stackexchange.com/a/39133

e.g. change permissions of files whose names start with .#
$ find . -type f -name '.#*' -exec chmod +w {} \;
*** parenthesis
parenthesis group target files then you can apply them with the same action

e.g. take delete action for all found files
#+begin_src bash
find . -type f \( -name '*.aux' -o -name '*.bbl' -o
-name '*.blg' -o -name '*.spl' -o -name '*.log' -o -name '*.pdf' \) -delete
#+end_src

** grep
** pdfgrep
e.g.
- command
  #+begin_src sh
  pdfgrep -H -n -i 'encode [^.]* as' some/path/to/dir/*
  #+end_src
  the text between 'encode' and 'as' doesn't include '.' character.
- output
  #+begin_example
  pdf/DBLP=conf+acl+GoldwasserRCR11.pdf:6:encode a first-order decision as αcs , a binary variP ROPORTION Words-predicate prop (Sec. 3.2)
  pdf/DBLP=conf+acl+GoldwasserRCR11.pdf:6:and encode these restrictions as global constraints analyze their properties. Tab. 1 defines the naming
  #+end_example
** xargs
xargs sends the standard input as arguments of another command

e.g.
$ find . -name '*.aux' -o '*.log' | xargs rm -f

** chmod
https://en.wikipedia.org/wiki/Chmod

- change to an executable for the user(owner)
  $ chmod u+x ./path/to/file
- change to an executable for all the users (recommended)
  $ chmod a+x ./path/to/file
- you may need shebang(#!) at the top line to indicate a program to run the script
  e.g. #!/bin/bash
  e.g. #!/home/user/program/miniconda3/envs/default/bin/python
  CAUTION: no space is needed between shebang and the program path

** wget
*** download a file to a specific directory
https://www.tecmint.com/wget-download-file-to-specific-directory/
#+begin_src sh
wget https://some-site.com/some-file.txt -P /some/path/to/dir
#+end_src
*** download a file with a different name
#+begin_src sh
wget -O new-file-name https://some-site.com/some-file.txt
#+end_src

** lscpu
show cpu information
$ lscpu

** free
show memory usage
$ free -h

** date
- changing current time manually (sudo is required)
  https://www.sharedit.co.kr/posts/2504

  the format is "월일시간년도.초"

  e.g.
  $ date 031211572018.00
  ==> Mon Mar 12 11:57:00 KST 2018
  $ date
  ==> Mon Mar 12 11:57:02 KST 2018

** mkdir
- mkdir "all directories in the path" when "directories don't exist"
  $ mkdir -p some/path/to/a/directory

** xdg-open
This is a command for GUI.
xdg-open - opens a file or URL in the user's preferred application

e.g.
$ xdg-open "example.pdf"
*** change default applications of xdg-open
https://unix.stackexchange.com/a/59088
https://stackoverflow.com/a/67185532

- you first need .desktop files such as ~/.local/share/applications/${your_app}.desktop
- change applications by commands
  #+begin_src sh
  # pdf
  # https://unix.stackexchange.com/a/59088
  # xdg-mime default emacsclient-alternate.desktop application/pdf
  xdg-mime default org.kde.okular.desktop application/pdf
  # xdg-mime default org.gnome.Evince.desktop application/pdf

  # web browser
  # https://stackoverflow.com/a/67185532
  xdg-mime default qutebrowser.desktop x-scheme-handler/https
  xdg-mime default qutebrowser.desktop x-scheme-handler/http
  xdg-mime default qutebrowser.desktop text/html
  xdg-mime default qutebrowser.desktop application/xhtml+xml
  # or firefox.desktop or nyxt.desktop
  #+end_src
- or you can directly change "~/.config/mimeapps.list"
** pskill
https://stackoverflow.com/a/27820938
$ pkill -f python
** killall
https://www.linkedin.com/pulse/use-killall-kill-commands-stop-processes-linux-kuldeep-saxena
$ killall gnome-control-center
** chown &* chgrp
Basic usage
$ chown user some/file/or/directory
$ chgrp user some/file/or/directory

Change owner and group of multiple files recursively
https://superuser.com/a/260939
$ chown -R user:group file1 file2
** shutdown
- scheduled shutdown
  https://askubuntu.com/questions/505929/shutdown-after-a-certain-time
  $ date  # to check the current time
  $ sudo shutdown -P 8:30
- cancel scheduled shutdown
  $ sudo shutdown -c
** suspend & hibernate
- suspend
  https://www.cyberciti.biz/faq/linux-command-to-suspend-hibernate-laptop-netbook-pc/
  $ systemctl suspend
- hibernate
  $ systemctl hibernate
** zip & unzip
*** zip
- compress a directory
  $ zip -r compressed.zip path/to/dir
- compress multiple directories
  $ zip -r compressed.zip path/to/dir1 path/to/dir2 path/to/dir3
- add a file to the existing .zip file
  $ zip compressed.zip path/to/file
- zip silently (-q option)
  $ zip -rq compressed.zip path/to/dir
*** unzip
- list files in .zip file
  $ unzip -l compressed.zip
- uncompressing .zip file
  $ unzip compressed.zip
- uncompressing .zip file to a specific directory
  $ unzip compressed.zip -d path/to/dir
** terminal spreadsheets
https://www.reddit.com/r/emacs/comments/kxinju/org_tables_for_big_spreadsheets/
- emacs SES
- emacs org-mode table
- visidata
- python pandas + org-mode
** xkill
https://koreaubuntu.wordpress.com/2009/08/19/%EC%9A%B0%EB%B6%84%ED%88%AC%EC%9D%98-ctrlaltdel%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80/
In GUI, you can kill a program by clicking its window after running 'xkill'
$ xkill
** make
*** make process
https://thoughtbot.com/blog/the-magic-behind-configure-make-make-install
#+begin_src sh
./configure
make
make install
#+end_src
** nohup
https://joonyon.tistory.com/98
https://unix.stackexchange.com/a/45915
https://stackoverflow.com/a/10408906

nohup = no hang up

- nohup in background
  $ nohup command &
- redirect stdout(1>) and stderr(2>)
  $ nohup command 1> result.out 2> result.err &
- redirect stdout(1>) and stderr(2>) into the same file
  $ nohup command > result.log 2>&1 &
- without nohup.out
  $ nohup command > /dev/null 2>&1   # doesn't create nohup.out
** chroot
change root directory
*** error of "failed to run command ‘/bin/bash’: No such file or directory"
https://unix.stackexchange.com/a/606895
in my case, /mnt/lib doesn't have most files
** acpi
- install
  $ sudo apt-get install acpi
- battery infomation
  $ acpi
** xset
*** current status
#+begin_src sh
xset q
#+end_src
*** chnage keyboard speed
"xset r rate [delay [rate]]"
e.g.
#+begin_src sh
xset r rate 250 60
#+end_src
*** set change sreen-off time
https://wiki.archlinux.org/title/Display_Power_Management_Signaling
https://shallowsky.com/linux/x-screen-blanking.html
https://deois.tistory.com/entry/xset-설정
#+begin_src sh
# sreen saver
xset s 1800 1800

# dpms
# the arguments are time for standby, suspend and off
xset dpms 2100 2400 2700
#+end_src
** cpupower
*** current frequency governor
$ cpupower frequency-info -p
or
$ cat /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor
*** change frequency governor
https://wiki.archlinux.org/title/CPU_frequency_scaling#Scaling_governors
$ cpupower frequency-set -g <governor>
e.g.
#+begin_src sh
sudo cpupower frequency-set -g ondemand
sudo cpupower frequency-set -g powersave
#+end_src

*** error of "No outputs have backlight property"
https://askubuntu.com/a/1060843

if you can find "intel_backlight" in "/sys/class/backlight",
update "/etc/X11/xorg.conf" with the following content

#+begin_example
Section "Device"
    Identifier  "Intel Graphics"
    Driver      "intel"
    Option      "Backlight"  "intel_backlight"
EndSection
#+end_example

then reboot
** startx
*** running X11 simply
https://en.wikibooks.org/wiki/Guide_to_X11/Starting_Sessions#xinit_and_startx
$ startx
*** run x session in another tty
https://askubuntu.com/a/546334
e.g.
$ startx -display :2 -- :2 vt3 &
where
- :2 means display number. you can get the current display by
  $ echo $DISPLAY
- vt3 means tty number. you can get the current tty by
  $ tty
** dmesg
https://man7.org/linux/man-pages/man1/dmesg.1.html
"dmesg is used to examine or control the kernel ring buffer."
dmesg can print kernel log
** fdisk
list disks
$ sudo fdisk -l

e.g. example output of a disk
#+begin_example
Disk /dev/sdb: 596.18 GiB, 640135028736 bytes, 1250263728 sectors
Disk model: S2 Portable
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: dos
Disk identifier: 0x8eddc49c
#+end_example
*** mount a listed disk
https://www.tutorialspoint.com/how-to-mount-usb-drive-in-a-linux-system
e.g.
#+begin_src sh
$ sudo mount /dev/sdb1 /mnt  # not '/dev/sdb' (entire disk) but '/dev/sdb1' (partition)
#+end_src
** lsblk
https://www.linkedin.com/pulse/use-killall-kill-commands-stop-processes-linux-kuldeep-saxena
https://www.reddit.com/r/emacs/comments/btvsk7/comment/ep3eepc/?utm_source=share&utm_medium=web2x&context=3
lsblk lists information about block devices.
$ lsblk
*** Check if a device is SDD or HDD
https://unix.stackexchange.com/a/227458
Check whether a mounted device, such as sda or sdb, is SDD or HDD:
$ lsblk -d -o name,rota

The example output is:
    NAME ROTA
    sda     0
    sdb     0
    sdc     1
where 1 is HDD(rotational device) and 0 is SDD.
*** detailed information
https://unix.stackexchange.com/questions/14165/list-partition-labels-from-the-command-line
#+begin_src sh
lsblk -o name,mountpoint,label,size,uuid
#+end_src
** udisksctl
https://www.reddit.com/r/linuxquestions/comments/a2lfh3/sudo_mount_vs_udisksctl_mount/
udisksctl is from udisks2 package
- udisksctl doesn't require sudo privilege unlike mount/unmount command
- udisksctl mount devices to /run/media/$USER/<automatically-created-directory>

#+begin_src sh
udisksctl mount -b /dev/sdb1  # not '/dev/sdb' (entire disk) but '/dev/sdb1' (partition)
udisksctl unmount -b /dev/sdb1
#+end_src
*** list device information
#+begin_src bash
udisksctl info -b /dev/sdb
#+end_src
** xte
*** toggle Caps Lock
https://askubuntu.com/a/607915
$ xte "key Caps_Lock"
** xmodmap
*** keysyms
https://wiki.linuxquestions.org/wiki/List_of_Keysyms_Recognised_by_Xmodmap
The page list symbols such as: LiraSign, EuroSign, VoidSymbol
*** mapping to a void symbol
https://emacs.stackexchange.com/a/36276

#+begin_src sh
xmodmap  -e 'keycode 255 = VoidSymbol'
xcape -t 175 -e 'Control_L=VoidSymbol'
#+end_src

#+begin_src elisp
(define-key evil-insert-state-map (kbd "<VoidSymbol>") 'evil-normal-state)
(define-key evil-visual-state-map (kbd "<VoidSymbol>") 'evil-normal-state)
#+end_src
** xcape
*** install
#+begin_src sh
sudo apt-get install xcape
#+end_src
*** make short-pressed Ctrl behave like Escape
https://gist.github.com/tanyuan/55bca522bf50363ae4573d4bdcf06e2e
http://tiborsimko.org/capslock-escape-control.html

- short-pressed Ctrl to send Escape
  #+begin_src sh
  # make short-pressed Ctrl behave like Escape:
  xcape -e 'Control_L=Escape'
  #+end_src
- To run the script automatically, add the code to "~/.xprofile"
- To stop xcape, kill the process
  #+begin_src sh
  pkill -f xcape
  #+end_src
*** timeout
"-t" options specific milliseconds (ms) for timeout
#+begin_src sh
xcape -t 200 -e 'Control_L=Escape' # 0.2 seconds
#+end_src
*** keycode
https://wiki.linuxquestions.org/wiki/List_of_Keysyms_Recognised_by_Xmodmap
https://gist.github.com/rickyzhang82/8581a762c9f9fc6ddb8390872552c250
- In X11 server, the keycode of "a" 38
** command
*** check a program exists
https://stackoverflow.com/a/677212
$ command -v pdfgrep
** pdfcrop
remove margin of pdf
#+begin_src sh
pdfcrop example.pdf
#+end_src
*** examples
#+begin_src sh
pdfcrop --margins 10 input.pdf output.pdf
pdfcrop --margins '5 10 5 20' --clip input.pdf output.pdf
#+end_src
** shopt
*** remove all directories except one
https://stackoverflow.com/a/34057281
#+begin_src sh
shopt -s extglob
cd parent
rm -rf !(some-dir-name)
#+end_src
** iptable
- list entries
  #+begin_src sh
  sudo iptables -L --line-numbers
  #+end_src
- e.g. add an delete an entry
  #+begin_src sh
  sudo iptables -A INPUT -p tcp --tcp-flags RST RST --sport 443 -j DROP
  sudo iptables -D INPUT 2
  #+end_src
** dd
dd can be used to make bootable usb.
#+begin_src sh
# https://linuxhint.com/create_bootable_linux_usb_flash_drive/
sudo dd bs=4M if=path/to/some-os.iso of=/dev/sdx status=progress oflag=sync
#+end_src
** split

split is used to divide a large file into smaller ones and copose the parts into the complete one

e.g. copy a large file into FAT32 filesystem by splitting the file into 4G files
#+begin_src sh
# https://superuser.com/a/1622389

# Splitting the file
split --bytes=$((2**32-1)) path/to/the/input/file /media/some-fat32-drive/output/prefix
# (2**32-1) == 4294967295
#
# the output files are: prefixaa, prefixab, prefixac ...

# Composing files into one
cat /media/some-fat32-drive/output/prefix?? > path/to/a/new/file
#+end_src
** stow
https://systemcrafters.net/managing-your-dotfiles/using-gnu-stow/
stow makes symbolic link of files in a specific directory

*** create symbolic link
#+begin_src sh
stow -t path/to/target -d path/to/dir some-dir-name
# "some-dir-name" should be in "path/to/dir"
#+end_src
If a symbolic link exist already, it doesn't create it again.
*** delete symbolic link
#+begin_src sh
stow -t path/to/target -d path/to/dir some-dir-name
# "some-dir-name" should be in "path/to/dir"
#+end_src
If a symbolic link doesn't exsit already, it doesn't delete it again.
** module
https://github.com/dasandata/Open_HPC/blob/master/Document/User%20Guide/4_app_env/4.2_Module.md

- 'module' is a user interface to the Modules package.
- Modules package provides for the dynamic modification of the user's environment

- available modules
  #+begin_src sh
  module av
  #+end_src
- unload and load
  e.g. loading cuda 10.1 instead of 11.2
  #+begin_src sh
  module unload cuda/11.2 nccl/cuda/11.2/2.8.3 cuDNN/cuda/11.2/8.1.0.77
  module load cuda/10.1 nccl/cuda/10.1/2.8.3 cuDNN/cuda/10.1/7.6.4.38
  #+end_src
*** apply module in the current terminal by running shell script

1. Save module commands as a shell script file
   e.g. Assume the following file is saved as "path/to/load-cuda-10.1.sh"
   #+begin_src sh
   #!/usr/bin/sh
   module unload cuda/11.2 nccl/cuda/11.2/2.8.3 cuDNN/cuda/11.2/8.1.0.77
   module load cuda/10.1 nccl/cuda/10.1/2.8.3 cuDNN/cuda/10.1/7.6.4.38
   #+end_src
2. Source the shell script file
   #+begin_src sh
   source path/to/load-cuda-10.1.sh
   #+end_src
** tar
*** extract .xz , .gz , ...
#+begin_src sh
tar -xf archive.tar.xz
tar -xf archive.tar.gz
#+end_src
*** extract a file with verbose option
#+begin_src sh
tar -xvf archive.tar.gz
#+end_src
*** extracta a file into a specific location
#+begin_src sh
tar -xf archive.tar.gz -C some/path/to/a/diredctory
#+end_src
