
* components of NVIDIA
https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
1. NVIDIA Driver (ex. 390.77)
   $ nvidia-smi  # the version appears at the left upper corner
2. CUDA toolkits or just CUDA (ex. v9.0)
   $ nvcc --version  # it may be different with the version by nvidia-smi
   $ # the version is determined after setting up CUDA toolkit's path
3. cuDNN (ex. v7.2.1)
   $ cat /usr/local/cuda-8.0/include/cudnn.h | grep CUDNN_MAJOR -A 2
* quick start
1. NVIDIA Driver
   install latest NVIDIA Driver by apt (latest NVIDIA Driver can cover all cuda toolkits)
2. CUDA toolkit
   Download CUDA toolkit as '.run' file
   install CUDA toolkit only, without extraction
   $ sudo sh cuda-10.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-10.1
3. cuDNN
   download page: https://developer.nvidia.com/rdp/cudnn-download
   - download the version of cuDNN for the corresponding version of CUDA toolkit
   https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
   1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
   2. Unzip the cuDNN package.
      $ tar -xzvf cudnn-10.1-linux-x64-v7.6.5.32.tgz
   3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
  $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.1/include
  $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.1/lib64
  $ sudo chmod a+r /usr/local/cuda-10.1/include/cudnn.h /usr/local/cuda-10.1/lib64/libcudnn*
  The path of CUDA toolkit and cuDNN should corresponds to "/usr/local/cuda-10.1/"
4. Update .bashrc for path information
   add following commands to ~/.bashrc
   $ export PATH=/usr/local/cuda-10.1/bin:$PATH
   $ export LD_LIBRARY_PATH=/usr/local/cuda-10.1/lib64:$LD_LIBRARY_PATH
* CUDA path
conventionally, /usr/local/cuda-x.x is used for CUDA path.
However, each user's local directory can be used as CUDA directory
e.g.
  https://blog.csdn.net/weixin_41278720/article/details/81255265
  export PATH=$HOME/cuda-10.2/bin:$PATH
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HOME/cuda-10.2/lib64/

* install guides
** NVIDIA Driver
- using GUI: software & updates
  https://eungbean.github.io/2018/08/08/Ubuntu-Installation1/
- using apt
  https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
  $ sudo apt-get install nvidia-384 nvidia-modprobe
- install latest nvidia drivers (in ubuntu 14.04) (it may not working)
  https://www.binarytides.com/install-nvidia-drivers-ubuntu-14-04/

  setup the xorg-edgers ppa
  $ sudo add-apt-repository ppa:xorg-edgers/ppa -y
  $ sudo apt-get update

  install a specific driver
  $ sudo apt-get install nvidia-334

  or install the latest version
  $ sudo apt-get install nvidia-current
- install latest nvidia drivers (another way)
  http://www.linuxandubuntu.com/home/how-to-install-latest-nvidia-drivers-in-linux
  $ sudo apt-get purge nvidia*
  $ sudo add-apt-repository ppa:graphics-drivers
  $ sudo apt-get update
  $ sudo apt-get install nvidia-430
- minimum driver version
  https://stackoverflow.com/a/30820690
*** manual install
- download .run file from NVIDIA site
- remove existing nvidia drivers
  $ sudo apt-get remove --purge nvidia-*
- install the new nvidia driver
  $ sudo service lightdm stop ## if you are using 11.04 replace `lightdm` with `gdm`
  $ sudo sh NVIDIA-Linux-x86_64-285.05.09.run
- reboot
*** Disabling nouveau kernel driver
https://askubuntu.com/a/951892
1. Open https://askubuntu.com/a/951892
2. Write the following scripts:
   #+begin_src
   blacklist nouveau
   options nouveau modeset=0
   #+end_src
3. sudo update-initramfs -u
4. reboot

** CUDA toolkits
https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/

*** Check globally installed CUDAs
$ ls -d /usr/local/cuda-*/

*** Multiple CUDAs (CUDA toolkits)
https://kaen2891.tistory.com/24
https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/
https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html#post-installation-actions

add following commands to ~/.bashrc
$ export PATH=/usr/local/cuda-8.0/bin:$PATH
$ export LD_LIBRARY_PATH=/usr/local/cuda-8.0/lib64:$LD_LIBRARY_PATH

*** CUDA runfile
**** prerequisites
- disable nouveau
https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
- X-server should be shutdown before installing NVIDIA driver
https://medium.com/@abhiksingla10/installing-cuda-9-2-and-cudnn-7-1-on-ubuntu-16-04-d194cee27cba
stop light dm
https://ericplayground.com/2017/09/26/how-to-stop-and-restart-an-x-server-on-ubuntu/
$ sudo service lightdm stop
$ sudo init 3
**** download
https://developer.nvidia.com/cuda-toolkit-archive
**** extract NVIDIA driver, CUDA installer and CUDA samples from runfile
https://medium.com/@zhanwenchen/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
$ bash ./cuda_*.run --extract=$HOME  # an absolute path

**** install all without extraction
https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
$ sudo sh cuda-9.1.run --silent

other options:
--override (https://eungbean.github.io/2018/08/08/Ubuntu-Installation2-1/)

**** install toolkit only, without extraction (recommended)
https://blog.kovalevskyi.com/multiple-version-of-cuda-libraries-on-the-same-machine-b9502d50ae77
$ sudo sh cuda-9.1.run --silent --toolkit --toolkitpath=/usr/local/cuda-9.1

**** all options of runfile
$ sudo sh cuda-9.1.run --help

** cuDNN install
https://medium.com/repro-repo/install-cuda-and-cudnn-for-tensorflow-gpu-on-ubuntu-79306e4ac04e
download page: https://developer.nvidia.com/rdp/cudnn-download
- download .tgz file rather than .deb file
- download the version of cuDNN for the corresponding version of CUDA toolkit

https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installlinux-tar
1. Navigate to your <cudnnpath> directory containing the cuDNN Tar file.
2. Unzip the cuDNN package.
   $ tar -xzvf cudnn-10.2-linux-x64-v7.6.5.32.tgz
3. Copy the following files into the CUDA Toolkit directory, and change the file permissions.
   $ sudo cp cuda/include/cudnn.h /usr/local/cuda-10.2/include
   $ sudo cp cuda/lib64/libcudnn* /usr/local/cuda-10.2/lib64
   $ sudo chmod a+r /usr/local/cuda-10.2/include/cudnn.h /usr/local/cuda-10.2/lib64/libcudnn*

** Install CUDA toolkit and cuDNN via conda
$ conda install -c anaconda cudatoolkit=10.2
$ conda install -c nvidia nvcc_linux-64
$ conda install -c anaconda cudnn
*** conda cudatoolkit vs nvidia cudatoolkit
https://programmersought.com/article/60204317600/

"cudatoolkit installed by conda install is only a subset of the
cudatoolkit provided by NVIDIA, and usually only contains the
runtime environment required by deep learning frameworks such as
PyTorch and TensorFlow, that is, runtime lib, but there is no
nvcc."

- also, conda cudatoolkit include cudnn files such as "libcudnn.so"
*** conda nvcc_linux-64
Conda nvcc_linux-64 package has several versions.
However, the version is not corresponding to actual that of nvcc

When I installed it by
$ conda install -c nvidia nvcc_linux-64=10.0

The installed nvcc had version 10.2
$ which nvcc
$ nvcc -V

* get gpu information
- Information of 1st GPU
  https://askubuntu.com/a/604167
  $ cat /proc/driver/nvidia/gpus/0000:01:00.0/information
- NVIDIA diver version and gpu usage
  $ nvidia-smi
- Detailed information with nvidia-smi
  $ nvidia-smi -q  # https://askubuntu.com/questions/5417/how-to-get-the-gpu-info/929163#929163
- CUDA version command
  $ nvcc --version

* use cuda with python
# https://stackoverflow.com/a/34776814
# https://stackoverflow.com/a/37901914
$ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES= python main.py  # no gpu
$ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=1 python main.py  # gpu #1
$ CUDA_DEVICE_ORDER=PCI_BUS_ID CUDA_VISIBLE_DEVICES=0,2 python main.py  # gpu #0 #2

* gpustat
- Install
  $ conda install -c conda-forge gpustat
- Show GPU usage with users and process IDs

* monitoring GPUs of remote servers
https://github.com/mseitzer/gpu-monitor
