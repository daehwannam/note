
* Python execution
** run string input (-c)
#+begin_src sh
python -c 'import torch; print(torch.__version__)'
#+end_src
** run string input with echo
#+begin_src sh
echo -e "for i in range(3):\n    print(i)" | python
echo -e "import nltk\nnltk.download('averaged_perceptron_tagger')\nnltk.download('wordnet')" | python
#+end_src
** python run file as module (-m)
#+begin_src sh
python -m pack1.pack2.module  # pack1/pack2/module.py is the module's path
#+end_src

this code can execute the block of __main__ in "module.py"

* Python virtualenv
** make a virtualenv
#+begin_src sh
python -m venv .venv
#+end_src
where ".venv" is a directory name
** switch to a virtualenv
#+begin_src sh
source .venv/bin/activate
#+end_src

Then, python in virtualenv is now used:
#+begin_src sh
which python
#+end_src

such as "/home/<user>/some-dir//.venv/bin/python".
** deactivate
#+begin_src sh
deactivate
#+end_src

* Python language
** tail call optimization
*** code
- https://github.com/Bogdanp/tcopy/tree/master/tcopy
- http://code.activestate.com/recipes/474088-tail-call-optimization-decorator/
- https://chrispenner.ca/posts/python-tail-recursion
*** discussion
- https://www.reddit.com/r/Python/comments/96i85o/convenient_tail_call_elimination_decorator_for/

** python2 to python3
#+begin_src sh
2to3 -w example.py [or directory]
#+end_src

if you don't want to make backup files:
#+begin_src sh
2to3 -wn example.py [or directory]
#+end_src

** typing
*** traverse types
- typing.get_origin
- typing.get_args
https://stackoverflow.com/questions/38703556/unpacking-pythons-type-annotations

** AST
*** AST example
https://stackoverflow.com/a/41801728
#+begin_src python
import ast
tree = ast.parse("print('Hello Python!!')")
print(ast.dump(tree))
exec(compile(tree, filename="<ast>", mode="exec"))
#+end_src

** working directory
https://linuxize.com/post/python-get-change-current-working-directory/#:~:text=To%20find%20the%20current%20working,chdir(path)%20.
*** get current working directory
#+begin_src python
import os
cwd = os.getcwd()
#+end_src
*** change working directory
#+begin_src python
import os
os.chdir('/path/to/other/dir')
#+end_src

** String formatting
*** align
https://stackoverflow.com/a/7771978
#+begin_src python :results output drawer
print("Formatting with modulo (%) operator:")
print(" - <before>%20s<after>" % "<inserted>")
print(" - <before>%+20s<after>" % "<inserted>")
print(" - <before>%-20s<after>" % "<inserted>")
print()
print("Formatting with 'str.format' function:")
print(" - <before>{:20}<after>".format("<inserted>"))
print(" - <before>{:>20}<after>".format("<inserted>"))
print(" - <before>{:<20}<after>".format("<inserted>"))
print()
print("Formatting with f-string")
var = '<inserted>'
print(f" - <before>{var:20}<after>")
print(f" - <before>{var:>20}<after>")
print(f" - <before>{var:<20}<after>")
#+end_src

#+RESULTS:
:results:
Formatting with modulo (%) operator:
 - <before>          <inserted><after>
 - <before>          <inserted><after>
 - <before><inserted>          <after>

Formatting with 'str.format' function:
 - <before><inserted>          <after>
 - <before>          <inserted><after>
 - <before><inserted>          <after>

Formatting with f-string
 - <before><inserted>          <after>
 - <before>          <inserted><after>
 - <before><inserted>          <after>
:end:

where the number of characgers between <before> and <after> is 20.
*** formatting for logging
https://stackoverflow.com/a/7771978
~logging.Formatter~ uses the formatting method with modulo operator.

** print
*** simple progress bar example
#+begin_src python
import time

print(f'\r[Processing] 0/3 [...]', end='')
time.sleep(1)
print(f'\r[Processing] 1/3 [=..]', end='')
time.sleep(1)
print(f'\r[Processing] 2/3 [==.]', end='')
time.sleep(1)
print(f'\r[Processing] 3/3 [===]', end='')

print('\nDone')
#+end_src

** regular expressions
*** re.compile
#+begin_src python
# https://docs.python.org/3/library/re.html#re.compile

# match with compiled regex object
prog = re.compile(pattern)
result = prog.match(string)

# match without compiled regex object
result = re.match(pattern, string)
#+end_src
*** Match.group
#+begin_src python
# https://docs.python.org/3/library/re.html#re.Match.group
m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
m.group(0)       # The entire match
# 'Isaac Newton'
m.group(1)       # The first parenthesized subgroup.
# 'Isaac'
m.group(2)       # The second parenthesized subgroup.
# 'Newton'
m.group(1, 2)    # Multiple arguments give us a tuple.
# ('Isaac', 'Newton')
#+end_src

** context manager
https://realpython.com/python-with-statement/
- class-based: https://realpython.com/python-with-statement/#coding-class-based-context-managers
- function-based: https://realpython.com/python-with-statement/#creating-function-based-context-managers

** doctest
https://docs.python.org/3/library/doctest.html

An example file with doctest:
#+begin_src python
# module/package.py

def test():
    '''
    Example:

    >>> test()
    hi
    '''
    print('hi')


if __name__ == "__main__":
    import doctest
    # doctest.testmod(verbose=True)
    doctest.testmod()
#+end_src

Run:
#+begin_src sh
python -m module.package
#+end_src

** docstring
*** sphinx
**** tutorial
https://www.sphinx-doc.org/en/master/tutorial/index.html
**** install
#+begin_src sh
pip install Sphinx
#+end_src
**** quick start
#+begin_src sh
PROJECT_PATH=path/to/project
DOC_PATH=$PROJECT_PATH/doc
sphinx-quickstart $DOC_PATH
#+end_src
- "Separate source and build directories (y/n) [n]:" -> y
**** build
#+begin_src sh
SOURCE=$DOC_PATH/source
BUILD=$DOC_PATH/build
sphinx-build -b html $SOURCE $BUILD/html
#+end_src

or
#+begin_src sh
cd $DOC_PATH
make html
#+end_src
**** doctest
***** running
#+begin_src sh
make doctest
#+end_src
***** skipping an example
https://stackoverflow.com/a/7622355
Use ~# doctest: +SKIP~ to skip a function call:
#+begin_src rst
>>> example() # doctest: +SKIP
'Hello world!'
#+end_src
**** automatic generation
https://www.sphinx-doc.org/en/master/tutorial/automatic-doc-generation.html
'autodoc' and 'autosummary extensions are required

To read source code, ~conf.py~ should add the path to the project:
#+begin_src sh
# https://www.sphinx-doc.org/en/master/tutorial/describing-code.html#including-doctests-in-your-documentation

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here.
import pathlib
import sys
sys.path.insert(0, pathlib.Path(__file__).parents[2].resolve().as_posix())
#+end_src

Similarly:
#+begin_src python
# https://stackoverflow.com/a/44980548
import sys
from pathlib import Path

# project_path = Path(__file__).parents[2]
project_path = Path(__file__).parent.parent
sys.path.insert(0, str(project_path))
#+end_src
**** code block example
https://www.sphinx-doc.org/en/master/usage/restructuredtext/directives.html#directive-code-block

** Type hints
*** Type hints with types that are not defined yet
https://stackoverflow.com/a/39757388
**** Using ~str~
#+begin_src python
def func(x: 'SomeTypeNotDefined'):
    pass
#+end_src

**** Using ~from __future__ import annotations~
This makes the types in type hints as ~str~ objects.

#+begin_src python
from __future__ import annotations

def func(x: SomeTypeNotDefined):
    pass
#+end_src
*** Conditional importing for type hints
https://stackoverflow.com/a/39757388
#+begin_src python
from typing import TYPE_CHECKING
if TYPE_CHECKING:
    # This block is not evaluated by default,
    # but 'mypy' will evaluate this import statement
    from torch import Tensor

def func(tensor: 'Tensor'):
    pass
#+end_src

** decorator
*** class as an decorator
https://stackoverflow.com/a/17705456

Use ~functools.update_wrapper~.

* Hy language
** emacs hy-mode
https://github.com/hylang/hy-mode
*** install
**** hy
- specific version
  #+begin_src sh
  python -m pip install hy==0.18.0
  #+end_src
- stable version(0.17.0): https://github.com/hylang/hy
  #+begin_src sh
  pip3 install hy
  #+end_src
  or 
  #+begin_src sh
  pip3 install --user hy  # install scripts in /home/dhnam/.local/bin/
  #+end_src
- latest master version: https://docs.hylang.org/en/stable/quickstart.html
  #+begin_src sh
  pip install git+https://github.com/hylang/hy.git
  #+end_src
**** jedhy
https://github.com/ekaschalk/jedhy
#+begin_src sh
pip install jedhy  # it may be installed without virtual env (with base python)
#+end_src
*** note
**** tuple unpacking
https://groups.google.com/forum/#!searchin/hylang-discuss/unpacking%7Csort:date/hylang-discuss/zk4Ck3fU4pA/F1gr4C09BAAJ
(setv [x y z _ _] [1 2 3 4 5])
(setv [a b #* rest] (range 5))
**** complex slicing
https://groups.google.com/forum/m/#!topic/hylang-discuss/gDWb_sSD1CQ
https://groups.google.com/forum/#!searchin/lisp-korea/hy%7Csort:date/lisp-korea/qgWO5jVNDmA/Bjl8NIdNAwAJ

- Python
>>> from numpy import *
>>> a = arange(24).reshape(2,3,4)
>>> a
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],

       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]]])
>>> a[:,0,0]
array([ 0, 12])
>>> a[0,::-1, -1]
array([11,  7,  3])
>>>

- Hy
>>> (import [numpy [*]])
>>> (setv a (.reshape (arange 24) 2 3 4))
>>> (get a (, (slice None) 0 0))
>>> (get a (, 0 (slice None None -1) -1))
** get sub items from collections
*** built-in
- first
- last
- rest
- some (conditional)
*** hy core
- butlast
- second
- drop
- drop-last
- drop-while
- take
- take-nth
- take-while
** hydimatic
- pretty print
  https://github.com/hylang/hy/issues/914
** type annotation
Hy's type annotation is similar to that of Clojure
https://github.com/hylang/hy/issues/640
https://ask.clojure.org/index.php/8993/where-to-place-function-return-type-hints
https://docs.python.org/3/library/typing.html
*** example 1
#+begin_src hy
(defn repeat-string ^(of list str) [^str s ^int n]
(* [s] n))   
#+end_src
#+begin_src python
def repeat_string(s: str, n: int) ->list[str]:
return [s] * n
#+end_src
*** example 2
#+begin_src hy
(setv ^(of dict str (of list int)) num-list-dict
  {"abc" [1 2 3] "xyz" [4 5 6]})
#+end_src
#+begin_src python
num_list_dict: dict[str, list[int]] = {'abc': [1, 2, 3], 'xyz': [4, 5, 6]}
#+end_src

* pip
** command
#+begin_src sh
python -m pip [command] [args]
#+end_src
** version check
https://stackoverflow.com/a/26664162/6710003
#+begin_src sh
python -m pip install stanfordnlp==
#+end_src
** installation
*** install specified version
#+begin_src sh
python -m pip install stanfordnlp==0.2.0
#+end_src
*** install a package with an extra option
https://stackoverflow.com/questions/46775346/what-do-square-brackets-mean-in-pip-install
#+begin_src sh
pip install "project[extra]"
#+end_src
e.g.
#+begin_src sh
pip install "transformers[sentencepiece]"
#+end_src
**** install a package with a version and an extra option
#+begin_src sh
pip install "transformers[sentencepiece]==4.23.1"
#+end_src
**** multiple extra options
https://stackoverflow.com/a/65542716
#+begin_src sh :results output drawer
# https://github.com/python-lsp/python-lsp-server
pip install python-lsp-server[yapf,rope]
# or
pip install "python-lsp-server[yapf, rope]"
#+end_src
*** install packages from a file of a package list
https://stackoverflow.com/a/15593865/6710003
- example
  - command
    #+begin_src sh
    pip install -r /path/to/requirements.txt
    #+end_src
  - requirements.txt
    #+begin_example
    BeautifulSoup==3.2.0
    Django==1.3
    Fabric==1.2.0
    Jinja2==2.5.5
    PyYAML==3.09
    Pygments==1.4
    SQLAlchemy==0.7.1
    South==0.7.3
    amqplib==0.6.1
    anyjson==0.3
    #+end_example

- you can make requirements by
  #+begin_src sh
  pip freeze > requirements.txt
  #+end_src
** uninstall a package
#+begin_src sh
pip uninstall "transformers[sentencepiece]==4.23.1"
#+end_src
** local installation
- install from a local directory
  #+begin_src sh
  pip install /path/to/directory
  #+end_src
- setup with editable
  https://stackoverflow.com/a/35064498
  https://stackoverflow.com/questions/15031694/installing-python-packages-from-local-file-system-folder-to-virtualenv-with-pip/20043907#20043907

  It installs a package with the directory path, then the directory becomes the source of package.
  When the code in the directory is chaged, the package is also changed.

  e.g.
  #+begin_src sh
  pip install --editable path/to/package
  pip install --editable .  # current directory
  #+end_src
** save the current package versions
#+begin_src sh
pip freeze > requirements.txt
#+end_src

* pdb
** pdb command
#+begin_src sh
python -m pdb example.py
#+end_src
or
#+begin_src sh
pdb example.py  # this command requires pdb setup for different environments
#+end_src
** pdb setting for conda environments
https://stackoverflow.com/questions/38346577/debuggin-with-pdb-within-a-conda-environment
1. source activate py3
2. find pdb path by =which pdb= for python2 or =which pdb3= for Python3
   ex) /usr/bin/pdb or /usr/bin/pdb3
3. find python path by =which python=
   ex) /home/dhnam/program/anaconda3/envs/py3/bin/python
4. copy /usr/bin/pdb or pdb3 to /home/dhnam/program/anaconda3/envs/py3/bin/pdb
5. then open /home/dhnam/program/anaconda3/envs/py3/bin/pdb
6. change shebang
   ex) /home/dhnam/program/anaconda3/envs/py3/bin/python

 in this example, pyvenv-workon should be applied for "py3"

** debugging without pdb.py
https://realpython.com/python-debugging-pdb/
- use <breakpoint()>

** interact command
https://stackoverflow.com/a/35302880
'interact' command enables to execute generators with 'self' objects

*** ignoring breakpoints
#+begin_src sh
PYTHONBREAKPOINT=0 python main.py
#+end_src

** where, frame, up, down
https://stackoverflow.com/a/23488594
- w(here) prints stack frames
- f(rame) switch to a specific frame
  - e.g. switch to frame of number 2
    #+begin_example
    (Pdb++) f 2
    #+end_example
  - e.g. switch to the last frame
    #+begin_example
    (Pdb++) f -1
    #+end_example
- u(p) and d(own) commands switch the current frame in the call stack

** conditional breakpoint
https://stackoverflow.com/a/44336430
e.g. making a conditional breakpoint on line 4 where breakpoint is triggered when =node_num > 4=
#+begin_example
# In "(Pdb)" prompt
b 4, node_num > 4
#+end_example

** debugging a module
https://stackoverflow.com/a/53173317

to run and debug ~some/package/module.py~ as a module:
#+begin_src sh
python -m pdb -m some.package.module
#+end_src

if ~module.py~ prints the current working directory,
it prints the path to the directory that contains ~some~.
#+begin_src python
import os
print(os.path.abspath(os.getcwd()))
#+end_src

** ipdb
*** changing the default debugger for "breakpoint()"
https://kortina.nyc/notes/use-ipdb-as-the-default-python-debugger-with-breakpoint-and-pythonbreakpoint/
#+begin_src sh
export PYTHONBREAKPOINT="ipdb.set_trace"
#+end_src
*** changing context size
https://stackoverflow.com/a/66474153
#+begin_src sh
export IPDB_CONTEXT_SIZE=10
#+end_src

* IPython
** Convert ipython notebook file(.ipynb) to python file(.py)
https://stackoverflow.com/a/37799207
#+begin_src sh
jupyter nbconvert --to script 'my-notebook.ipynb'
jupyter nbconvert --to python 'my-notebook.ipynb'
#+end_src

* unittest
https://m.blog.naver.com/wideeyed/221841799910
