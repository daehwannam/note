* VirtualBox
** Mount command
   linux command: sudo mount -t vboxsf my_data ~/my_data
   - vboxsf my_data: shared folder in host os (os installed in real pc)
   - ~/my_data: folder in guest os (os from virtual image)

** Port forwarding for SSH
   - Way 1: VBox command: VBoxManage modifyvm myserver --natpf1 "ssh,tcp,,<port for guest ssh server>,,22"
   - Way 2
     - Settings -> Network -> Adapter 1 -> Advanced -> Port Forwarding
     - Insert "ssh / TCP / / 61112 / / 22

** Remote desktop to Guest: Remote display
   Settings -> Display -> Remote Display -> Enagle Server & change Server Port & Authentication=External 
*** Connection problem of Windows host
    https://www.virtualbox.org/ticket/4406
    check "save credentials"

** Copy image
   https://srackham.wordpress.com/cloning-and-copying-virtualbox-virtual-machines/
   File -> Virtual Media Manager 

** Slow booting
   - https://askubuntu.com/a/1038939


* KVM
  Kernel-based Virtual Machine

** Setup
*** Check if virtualization is supported
    https://welcome1208.tistory.com/63
    https://hiseon.me/server/ubuntu-kvm-install/
*** install
    https://hiseon.me/server/ubuntu-kvm-install/
    - install
      $ sudo apt-get update
      $ sudo apt-get install qemu-kvm libvirt-daemon-system virtinst bridge-utils cpu-checker
    - add an user to the group named kvm for convenient use of kvm
      $ sudo adduser some-user kvm
    - check installation
      $ kvm-ok
    - list virtual machines
      https://welcome1208.tistory.com/63
      $ virsh list --all
    - reboot to run libvirt daemon (libvirtd -d)
*** install the latest KVM (optional)
    https://www.qemu.org/download/#source
    - prerequisite
      #+begin_src sh
      sudo apt-get install -y ninja-build
      #+end_src
    - build
      #+begin_src sh
      git clone https://gitlab.com/qemu-project/qemu.git
      cd qemu
      git submodule init
      git submodule update --recursive
      ./configure
      make  # or 'make install' directly
      #+end_src
    - output directory: ./build
    - check version
      $ ./build/qemu-x86_64 --version
    - install
      $ make install
    - version check
      $ kvm --version
*** bridged mode setup (optional)
    - NAT vs Bridged mode
      https://developerin.tistory.com/18
      https://superuser.com/questions/227505/what-is-the-difference-between-nat-bridged-host-only-networking
    - setup methods
      - https://linux.systemv.pe.kr/kvm%EC%97%90-bridge-network-%EC%84%A4%EC%A0%95/
      - https://hiseon.me/server/ubuntu-kvm-install/ and https://hiseon.me/linux/ubuntu/bridge-configuration/
*** virt-manager setup
    https://hiseon.me/server/how-to-use-virt-manager/
    https://welcome1208.tistory.com/65

    It's a GUI tool for managing virtual machines, although kvm commands can do too
    - install
      $ sudo apt install virt-manager
    - run
      $ virt-manager
*** install guest Windows
    https://www.youtube.com/watch?v=RLy1zozJ9W0
    https://dennisnotes.com/note/20180614-ubuntu-18.04-qemu-setup/
    - qcow2 vs. rwa(.img)
      - qcow2 support features like live snapshots
      - raw format is faster

** Configuration    
*** using multiple screens (monitors)
    - "Show virtual hardware details"
    - "Add Hardware" -> "Video" -> "Finish"
       repeat it as many as the number of additional screens
    - connect to the VM via remote-viewer
      $ remote-viewer spice://localhost:5900
      - where the port number 5900 can be found from:
        "Show virtual hardware details" -> "Display Spice"
*** connecting to VM remotely
    https://techienotes.blog/2014/12/17/how-to-connect-to-a-vm-hosted-on-qemu-remotely-using-virt-viewer/
    $ virt-viewer --connect qemu+ssh://aamr@hobba/system winVM

    where
    * virt-viewer: the command itself
    * --connect: the parameter telling the command to connect
    * qemu+ssh: telling virt-viewer that this host is reachable via SSH and QEMU is used for virtualization (since it supports Xen as well)
    * aamr: the SSH username
    * hobba: the remote server name
    * system: a static word, just type it as it is!
    * winVM: the name you gave to the Virtual Machine
    
*** resize image's capacity
    https://superuser.com/a/375847
    $ qemu-img resize $IMAGE.qcow2 +$TOTAL_SIZE
    where $IMAGE.qcow2 is the VM's image path ( [[*path of virtual machine image][path of virtual machine image]] )
    
    https://maunium.net/blog/resizing-qcow2-images/
    $ qemu-img resize $IMAGE.qcow2 +$ADDITIONAL_SIZE
    e.g. qemu-img resize win10.qcow2 +10G

    https://superuser.com/a/1174602
    Then you should update guest os's disk
    e.g. in Windows 10, use "Disk Management" to extend C driver's volume
**** reducing image's size
     http://woshub.com/kvm-expand-shrink-vm-disk/

     [Caution]
     Shrinking VM's can remove data in your image
     $ sudo qemu-img resize --shrink $IMAGE.qcow2 40G
     $ sudo qemu-img resize --shrink $IMAGE.qcow2 -20G
*** enable screen resize ability
    https://stackoverflow.com/a/41990601

    - download 'spice-guest-tools'('spice-vdagent') for window(linux) guest:
      https://www.spice-space.org/download.html#guest
    - install the program
    - QEMU/KVM menu -> View -> Scale Display -> Auto resize VM with window
*** path of virtual machine image
    "Show virtual hardware details" -> "IDE Disk 1" -> "Details" -> "Source path"
*** create virtual machines with existing image
    You can "Create a new virtual machine" with "Import existing disk image" option
*** copy virtual machines into other computers
    https://www.youtube.com/watch?v=0Ny0__uTGfM

    you can copy your image (.qcow2 file) into another computer,
    then create the same virtual machine.

    before create the image on the other machine, you may need to change the permission:
    $ sudo chmod 777 my_image.qcow2
*** edit guest VM's XML configuration
    https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-managing_guest_virtual_machines_with_virsh-editing_a_guest_virtual_machines_configuration_file

    - list VMs then edit
      $ virsh list --all  # list all VMs
      $ virsh edit <VM's name>

    - editing with emacs:
      https://unix.stackexchange.com/a/502691
      $ EDITOR=emacs virsh edit win10
      $ EDITOR=emacsclient virsh edit win10
      $ EDITOR="emacs -nw" virsh edit win10

      You can also export the default editor in ~/.bashrc
      $ export EDITOR=emacs
      $ export EDITOR=emacsclient
      $ export EDITOR="emacs -nw"
*** sharing via samba
    https://unix.stackexchange.com/a/183609
    https://unix.stackexchange.com/a/86083

**** samba setup
     https://psychoria.tistory.com/678
     - install
       [[file:linux.org.txt::*samba install][samba install]]
     - update /etc/samba/smb.conf
       add the following information to the bottom of the config file:
       #+begin_example
       [shared network folder name]
       comment = multimedia directory
       path = /data/Multimedia
       valid users = id1,id2
       writeable = yes
       read only = no
       create mode = 0777
       directory mode = 0777
       #+end_example
     - restart to apply config
       $ sudo service smbd restart
**** connect to samba from windows guest
     https://www.techrepublic.com/article/how-to-connect-to-linux-samba-shares-from-windows-10/
     - right mouse click on PC
     - select "Add a network location"
     - check "Reconnect" and "Use different credentials"
       (not to forget credentials - https://superuser.com/a/262598 )
     - type "\\<IP address>\<shared network folder name>" for as network folder
       where 10.0.2.2 means host machine's IP
       e.g. "\\192.168.122.1\shared data"
       - you can find ip address of host for virtual machines :
         $ ip addr  # type this command in the host terminal
         you can get IP from a network driver such as 'virbr0'
     - input user's id and samba's password
       and check "Remember credentials"
       (not to forget credentials - https://superuser.com/a/262598 )

*** sharing folder via filesystem passthrough
    http://www.linux-kvm.org/page/9p_virtio

    - "Show virtual hardware details"
    - "Add Hardware"
    - "Filesystem"
    - Set "Driver" as "Path"
    - Fill "Source path" in host and "Target path" in guest
      (the filesystem on "Source path" may need to have permission 777,
      or change the group id as kvm's?)

*** sharing folder via partition
    https://forums.unraid.net/topic/46634-passthrough-hard-drive-to-vm/?do=findComment&comment=459683

    It's working with windows

    - find UUID of filesystem
      $ sudo blkid
    - list VMs
      $ virsh list --all
    - Edit XML config to add a disk
      $ virsh edit <VM name>
      #+begin_example
      <disk type='block' device='disk'>
        <driver name='qemu' type='raw' cache='writeback'/>
        <source dev='/dev/disk/by-uuid/ata-WDC_WD7500BPKX-00HPJT0_WD-WXL1E84AK1MK'/>
        <target dev='hdd' bus='virtio'/>
      </disk>
      #+end_example
      where you should change UUID of the example

*** sharing folder of host linux with guest windows via virtiofs (optional)
    https://unix.stackexchange.com/a/635636
**** unknown fs driver type 'virtiofs'
     # https://lists.gnu.org/archive/html/qemu-devel/2020-08/msg05866.html
     # virtiofsd needs a higher version
     # $ virtiofsd --version

     https://virtio-fs.gitlab.io/
     qemu-kvm needs a higher version
     $ kvm --version
**** update VM's XML config
     https://libvirt.org/kbase/virtiofs.html
     #+begin_src xml
     <domain>
       ...
       <memoryBacking>
         <source type='memfd'/>
         <access mode='shared'/>
       </memoryBacking>
       ...
       <devices>
         ...
         <filesystem type='mount' accessmode='passthrough'>
           <driver type='virtiofs'/>
           <source dir='/path'/>
           <target dir='mount_tag'/>
         </filesystem>
         ...
       </devices>
     </domain>
     #+end_src

*** Convert qcow2 to raw format
    https://easyengine.io/tutorials/kvm/convert-qcow2-to-raw-format/

    - backup VM config
      $ virsh dumpxml <vmname> > ~/path/to/vmname.xml
    - image conversion
      - run the following command
        $virsh dumpxml <vmname> | grep file
      - then the output is like the following
        #+begin_example
        <disk type='file' device='disk'>
          <source file='path/to/vmname.qcow2'/>
        #+end_example
      - convert
        $ sudo qemu-img convert path/to/vmname.qcow2 path/to/vmname.raw
      - edit VM config
        $ EDITOR=emacsclient virsh edit <vmname>
        - find lines like below
          #+begin_example
          <disk type='file' device='disk'>
            <driver name='qemu' type='qcow2'/>
            <source file='path/to/vmname.qcow2'/>
            <target dev='vda' bus='virtio'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
          </disk>
          #+end_example
        - replace 'qcow2' with 'raw'
          #+begin_example
          <disk type='file' device='disk'>
            <driver name='qemu' type='raw'/>
            <source file='path/to/vmname.raw'/>
            <target dev='vda' bus='virtio'/>
            <address type='pci' domain='0x0000' bus='0x00' slot='0x05' function='0x0'/>
          </disk>
          #+end_example
      - start vm with virsh
        $ virsh start <vmname>

** Optimization
   https://unix.stackexchange.com/a/48584
   https://dennisnotes.com/note/20180614-ubuntu-18.04-qemu-setup/
   http://m.todaysppc.com/renewal/view.php?id=free&no=423466
   https://www.youtube.com/watch?v=RLy1zozJ9W0
   https://linuxhint.com/install_virtio_drivers_kvm_qemu_windows_vm
   https://www.youtube.com/watch?v=ZqBJzrQy7Do

   - "Show virtual hardware details"
   - CPUs
     - check "Copy host CPU configuration"
     # - check Manually et CPU topology
     #   - Sockets = 1
     #   - Cores = N
     #   - Threads = N
   - Memory: increase memory if necessary
   - IDE Disk 1 (VirtIO DISK 1)
     - Cache mode = none (for the best stability)
     # - Cache mode = writeback (this option could occupy much memory)
     - (VirtIO DISK is preferable but chaging type from IDE to VirtIO could raise error in guest OS)
   - NIC
     - Device model = virtio
   - Video
     - Model: Virtio
     - then, change resolution in host OS
*** Change IDE to VirtIO disk for Windows
    https://unix.stackexchange.com/a/223890
    - Add a CD-ROM with [[https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso][virtio-win.iso]]
      (if CD-ROM is already exist, just set the path to .iso file)
    - Add a new dummy(empty) VirtIO disk
      - "Add Hardware" -> "Storage" -> 'Bus type" -> "VirtIO"
    - boot Windows guest and open CD drive folder then run "virtio-win-gt-x64.msi"
    - Change "Disk bus" from "IDE" to "VirtIO"
    - Remove dummpy disk
      - before removing by virt-manager, check its path and remove the file by 'sudo rm path/to/img'

** Usage
*** virsh commands
    https://computingforgeeks.com/virsh-commands-cheatsheet/
    - list VMs
      $ virsh list --all
    - start VM
      $ virsh start <vm-name>
    - stop VM
      $ virsh shutdown <vm-name>
*** switching from guest to host
    https://superuser.com/a/1452377
    
    - the default key: Ctrl+Alt
    - Change grab key:
      run virt-manager -> menu -> Edit -> Preferences -> "Console" -> "Grab keys"
    - e.g. use grab key to switch workspace
      Ctrl+Alt, Ctrl+Alt+<up> : switch to upperside workspace
*** using USB device connected to host
    https://www.youtube.com/watch?v=SSQxrgE_rjg
    https://www.linux-kvm.org/page/USB_Host_Device_Assigned_to_Guest

    - shutdown VM
    - click "Show virtual hardware details"
    - click "Add Hardware" at the left bottom
    - click "USB Host Device" and select your device
    - run VM
    - clic "Virtual Machine" -> "Redirect USB device" -> select device
*** find guest's IP
    https://www.cyberciti.biz/faq/find-ip-address-of-linux-kvm-guest-virtual-machine/
    #+begin_src sh
    virsh net-list
    virsh net-info default
    virsh net-dhcp-leases default
    #+end_src

    or run commands guest OS
    - "ipconfig" for windows
    - "ifconfig" for linux
