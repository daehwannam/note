* VirtualBox
** Mount command
   linux command: sudo mount -t vboxsf my_data ~/my_data
   - vboxsf my_data: shared folder in host os (os installed in real pc)
   - ~/my_data: folder in guest os (os from virtual image)

** Port forwarding for SSH
   - Way 1: VBox command: VBoxManage modifyvm myserver --natpf1 "ssh,tcp,,<port for guest ssh server>,,22"
   - Way 2
     - Settings -> Network -> Adapter 1 -> Advanced -> Port Forwarding
     - Insert "ssh / TCP / / 61112 / / 22

** Remote desktop to Guest: Remote display
   Settings -> Display -> Remote Display -> Enagle Server & change Server Port & Authentication=External 
*** Connection problem of Windows host
    https://www.virtualbox.org/ticket/4406
    check "save credentials"

** Copy image
   https://srackham.wordpress.com/cloning-and-copying-virtualbox-virtual-machines/
   File -> Virtual Media Manager 

** Slow booting
   - https://askubuntu.com/a/1038939


* KVM
  Kernel-based Virtual Machine

** Setup
*** Check if virtualization is supported
    https://welcome1208.tistory.com/63
    https://hiseon.me/server/ubuntu-kvm-install/
*** install
    https://hiseon.me/server/ubuntu-kvm-install/
    - install
      $ sudo apt-get update
      $ sudo apt-get install qemu-kvm libvirt-daemon-system virtinst bridge-utils cpu-checker
    - add an user to the group named kvm for convenient use of kvm
      $ sudo adduser some-user kvm
    - check installation
      $ kvm-ok
    - list virtual machines
      https://welcome1208.tistory.com/63
      $ virsh list --all
*** install the latest KVM (optional)
    https://www.qemu.org/download/#source
    - prerequisite
      #+begin_src sh
      sudo apt-get install -y ninja-build
      #+end_src
    - build
      #+begin_src sh
      git clone https://gitlab.com/qemu-project/qemu.git
      cd qemu
      git submodule init
      git submodule update --recursive
      ./configure
      make  # or 'make install' directly
      #+end_src
    - output directory: ./build
    - check version
      $ ./build/qemu-x86_64 --version
    - install
      $ make install
    - version check
      $ kvm --version
*** bridged mode setup (optional)
    - NAT vs Bridged mode
      https://developerin.tistory.com/18
      https://superuser.com/questions/227505/what-is-the-difference-between-nat-bridged-host-only-networking
    - setup methods
      - https://linux.systemv.pe.kr/kvm%EC%97%90-bridge-network-%EC%84%A4%EC%A0%95/
      - https://hiseon.me/server/ubuntu-kvm-install/ and https://hiseon.me/linux/ubuntu/bridge-configuration/
*** virt-manager setup
    https://hiseon.me/server/how-to-use-virt-manager/
    https://welcome1208.tistory.com/65

    It's a GUI tool for managing virtual machines, although kvm commands can do too
    - install
      $ sudo apt install virt-manager
    - run
      $ virt-manager
*** resize image's capacity
    https://maunium.net/blog/resizing-qcow2-images/

    $ qemu-img resize $IMAGE.qcow2 +$SIZE
    e.g. qemu-img resize win10.qcow2 +10G
*** enable screen resize ability
    https://stackoverflow.com/a/41990601

    - download 'spice-guest-tools'('spice-vdagent') for window(linux) guest:
      https://www.spice-space.org/download.html#guest
    - install the program
    - QEMU/KVM menu -> View -> Scale Display -> Auto resize VM with window
*** switching from guest to host
    https://superuser.com/a/1452377
    
    - the default key: Ctrl+Alt
    - Change grab key:
      run virt-manager -> menu -> Edit -> Preferences -> "Console" -> "Grab keys"
    - e.g. use grab key to switch workspace
      Ctrl+Alt, Ctrl+Alt+<up> : switch to upperside workspace
*** path of virtual machine image
    "Show virtual hardware details" -> "IDE Disk 1" -> "Details" -> "Source path"
*** create virtual machines with existing image
    You can "Create a new virtual machine" with "Import existing disk image" option
*** copy virtual machines into other computers
    https://www.youtube.com/watch?v=0Ny0__uTGfM

    you can copy your image (.qcow2 file) into another computer,
    then create the same virtual machine.

    before create the image on the other machine, you may need to change the permission:
    $ sudo chmod 777 my_image.qcow2
*** edit guest VM's XML configuration
    https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/virtualization_deployment_and_administration_guide/sect-managing_guest_virtual_machines_with_virsh-editing_a_guest_virtual_machines_configuration_file

    - list VMs then edit
      $ virsh list --all  # list all VMs
      $ virsh edit <VM's name>

    - editing with emacs:
      https://unix.stackexchange.com/a/502691
      $ EDITOR=emacs virsh edit win10
      $ EDITOR=emacsclient virsh edit win10
      $ EDITOR="emacs -nw" virsh edit win10

      You can also export the default editor in ~/.bashrc
      $ export EDITOR=emacs
      $ export EDITOR=emacsclient
      $ export EDITOR="emacs -nw"
*** sharing via samba
    https://unix.stackexchange.com/a/183609
    https://unix.stackexchange.com/a/86083

*** sharing folder of host linux with guest windows (optional)
    https://unix.stackexchange.com/a/635636
**** unknown fs driver type 'virtiofs'
     # https://lists.gnu.org/archive/html/qemu-devel/2020-08/msg05866.html
     # virtiofsd needs a higher version
     # $ virtiofsd --version

     https://virtio-fs.gitlab.io/
     qemu-kvm needs a higher version
     $ kvm --version
**** update VM's XML config
     https://libvirt.org/kbase/virtiofs.html
     #+begin_src xml
     <domain>
       ...
       <memoryBacking>
         <source type='memfd'/>
         <access mode='shared'/>
       </memoryBacking>
       ...
       <devices>
         ...
         <filesystem type='mount' accessmode='passthrough'>
           <driver type='virtiofs'/>
           <source dir='/path'/>
           <target dir='mount_tag'/>
         </filesystem>
         ...
       </devices>
     </domain>
     #+end_src
